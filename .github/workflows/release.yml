name: WST Release

on:
  push:
    tags:
      - 'v*'  # Trigger on tags starting with "v"

jobs:
  # Create a draft release
  create_release:
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: true
          prerelease: false

  # Build and upload artifacts
  build_and_upload:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: create_release
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build and prepare release folder
        id: build_release
        run: |
          RELEASE_DIR="release-${{ matrix.goos }}-${{ matrix.goarch }}"
          mkdir -p "$RELEASE_DIR"
          OUTPUT_NAME="$RELEASE_DIR/wst"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o "$OUTPUT_NAME" .
          cp LICENSE README.md "$RELEASE_DIR/"
          cd "$RELEASE_DIR"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            # Zip for Windows
            ARCHIVE_NAME="wst-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip"
            zip "../$ARCHIVE_NAME" wst LICENSE README.md
          else
            # Tarball for Linux/macOS
            ARCHIVE_NAME="wst-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz"
            tar -czf "../$ARCHIVE_NAME" wst LICENSE README.md
          fi
          cd ..
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: "${{ steps.build_release.outputs.archive_name }}"
          asset_name: "${{ steps.build_release.outputs.archive_name }}"
          asset_content_type: application/gzip


  # Mark the release as not a draft
  publish_release:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: build_and_upload
    steps:
      - uses: actions/checkout@v4
      - name: Update Release to Not a Draft
        run: |
          gh release edit ${{ github.ref_name }} --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}