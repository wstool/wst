$schema: "https://json-schema.org/draft/2020-12/schema"
title: JsonSchema for WST configuration
type: object
properties:
  version:
    title: WST configuration version
    description: The current version is 1.0. Internally the value is converted to string but number is accepted.
    type: [ string, number ]
  name:
    title: WST project name
    description: The name should be short as it might be used in some messages produced by WST.
    type: string
  description:
    title: WST project description
    description: The description should describe project purpose.
    type: string
  spec:
    $ref: '#/$defs/spec'

$defs:
  parameters:
    title: Parameters object
    description: |
      The parameters object is a map of parameters provided in various parts for customization. It can be a nested map
      if needed creating some sort of a tree structure. The leaves are always scalar values.
    type: object
    patternProperties:
      "^[a-zA-Z_][a-z0-9_]+$":
        oneOf:
          - type: [ string, number, boolean ]
          - $ref: '#/$defs/parameters'

  commonEnvironment:
    title: Common environment
    description: |
      The common environment serves as a base environment for all environments.
    properties:
      ports:
        title: Environment ports
        description: The ports specifies the port range that can be used by services in environment
        type: object
        properties:
          start:
            title: Ports range start
            type: integer
          end:
            title: Ports range end
            type: integer

  containerEnvironment:
    title: Container environment
    description: |
      The container environment serves as a base environment for all environments that run OCI containers.
    allOf:
      - $ref: '#/$defs/commonEnvironment'
      - title: Container specific properties
        type: object
        properties:
          registry:
            $ref: '#/$defs/containerRegistry'

  dockerEnvironment:
    title: Docker environment
    description: |
      The Docker environment handles communication with Docker daemon.
    allOf:
      - $ref: '#/$defs/containerEnvironment'
      - title: Docker specific properties
        type: object
        properties:
          name_prefix:
            title: Prefix for the network and services names
            description: The namespace is optional and
            type: string

  kubernetesEnvironment:
    title: Kubernetes environment
    description: |
      The Kubernetes environment handles communication with Docker daemon.
    allOf:
      - $ref: '#/$defs/containerEnvironment'
      - title: Kubernetes specific properties
        type: object
        properties:
          namespace:
            title: Prefix for the network and services
            type: string
          kubeconfig:
            title: Kubernetes config file path
            type: string

  environments:
    title: Environment definitions
    description: |
      Environments can be specified either as an object defining the used sandboxes or as a string representing a path
      to fetch sandbox definitions from.
    type: [ object, string ]
    properties:
      common:
        $ref: '#/$defs/commonEnvironment'
      local:
        $ref: '#/$defs/commonEnvironment'
      container:
        $ref: '#/$defs/containerEnvironment'
      docker:
        $ref: '#/$defs/dockerEnvironment'
      kubernetes:
        $ref: '#/$defs/kubernetesEnvironment'

  headers:
    title: HTTP Headers
    description: Map of HTTP headers where key is header name and value is its value.
    type: object
    patternProperties:
      "^[a-zA-Z_][a-z0-9_]+$":
        title: Header value
        type: string

  metricsExpectation:
    title: Metrics expectation action
    description: |
      The metrics expectation allows verifying the metrics currently only saved by benchmark.
    type: object
    properties:
      id:
        title: Metrics ID
        description: |
          The metrics ID identifies the saved metrics saved by one of the actions (currently just benchmark). The
          default last value matches the default benchmark metrics ID which means that if there is just one benchmark
          being and its ID is unchanged, then there is no need to specify this property.
        type: string
        default: last
      rules:
        title: Metric rules
        description: |
          The rules are used to check the expectations. All checks have to pass to result in successful execution.
        type: array
        items:
          title: Metrics rule
          description: |
            The metrics rule checks a single metric. Each rule contains metric name that is fetched and its value is
            compared by the operator with the supplied value.
          type: object
          properties:
            metric:
              title: Metric name
              type: string
            operator:
              title: Comparison operator
              type: string
              enum: [ eq, ne, gt, ge, le, lt ]
            value:
              title: Compared value
              description: Value to compare the metric with.
              type: number

  outputExpectation:
    title: Output expectation action
    description: |
      The output expectation checks the service's output, which usually contains the service logs. This allows
      for the verification of the expected service behavior.
    type: object
    properties:
      order:
        title: Expected order of messages
        description: |
          This defines the expected order of messages when there are multiple messages in an array. It specifies
          whether these messages need to be in a fixed sequence or can appear in any order.
        type: string
        enum: [ fixed, random ]
        default: fixed
      match:
        title: Match type for each message
        type: string
        enum: [ exact, regexp ]
        default: exact
      type:
        title: Output type
        type: string
        enum: [ stdout, stderr ]
        default: any
      messages:
        title: Array of expected messages
        type: array
        items:
          title: Message item
          description: |
            Each message item should be either an exact string or a regular expression that matches the actual
            string.
          type: string
      render_template:
        title: Template rendering switch
        description: |
          This switch selects whether template rendering is used for messages.
        type: boolean
        default: true

  responseExpectation:
    title: Response expectation action
    description: |
      The response expectation allows verifying the response from the selected request.
    type: object
    properties:
      request:
        title: Request ID
        description: |
          The request ID identifies the request whose response is checked in this expectation. The default last value
          matches the default request ID of the request action which means that if there is just one request being
          done and its ID is unchanged, then there is no need to specify this property.
        type: string
        default: last
      headers:
        $ref: '#/$defs/headers'
      body:
        title: Response body to match
        description: |
          The response body is the expected body for the response of the selected request.
        type: [ object, string ]
        properties:
          content:
            title: Response body content to match
            description: |
              The content represents the content or pattern that needs to match the actual request response. It should
              be a string but number is also allowed for easier configuration if only number is returned.
            type: [ string, number ]
          match:
            title: Match type for content
            type: string
            enum: [ exact, regexp ]
            default: exact
          render_template:
            title: Template rendering switch
            description: |
              The switch selects whether the template rendering is used for body content.
            type: boolean
            default: true
      status:
        title: Status code to match
        description: |
          The status is the expected status code for the response of the selected request.
        type: integer

  serverExpectation:
    title: Server expectation action definition
    description: |
      The expectation is an action type that checks whether the provided expectation type aligns with what's expected.
      It's usually used for pattern matching of response data or output from the logs.
    type: object
    allOf:
      - properties:
          parameters:
            $ref: '#/$defs/parameters'
      - oneOf:
          - properties:
              output:
                $ref: '#/$defs/metricsExpectation'
          - properties:
              output:
                $ref: '#/$defs/outputExpectation'
          - properties:
              response:
                $ref: '#/$defs/responseExpectation'

  serverExpectations:
    title: Server expectations mapping
    description: |
      The expectations mapping object allows for the definition of custom expectations that can be executed by actions.
      As noted in the actions' descriptions, the action name can be composed of various parts. In the case of
      expectations, it's formatted as follows:

      expect[/<server_name>/<expectation_name>]

      Here, <server_name> is the name of the server where the expectation is defined, and <expectation_name>
      corresponds to the name matching the key of this object.
    type: object
    additionalProperties:
      $ref: '#/$defs/serverExpectation'

  sandboxHook:
    title: Sandbox lifecycle hook
    description: |
      The sandbox hook defines an action for a specific sandbox lifecycle hook on the service. It allows for the
      definition of a command, a signal, or a native hook.
    type: object
    oneOf:
      - properties:
          native:
            title: Native sandbox hook
            description: |
              The native hook is a method provided by the sandbox itself for a specific lifecycle hook. For instance,
              it is used for containers to natively restart the application.
            type: object
            properties:
              type:
                title: 'Native sandbox hook type'
                type: string
                enum: [ 'start', 'restart', 'stop' ]
      - properties:
          command:
            title: Command sandbox hook
            description: |
              This property represents the shell command that gets executed.
            type: object
            oneOf:
              - properties:
                  executable:
                    title: Program path to execute
                    description: |
                      The executable is a single program to execute.
                    type: string
                  args:
                    title: Program arguments
                    description: |
                      The arguments can be either a string, in which case a shell is used, or an array of strings, which
                      executes the program directly without using the shell.
                    type: array
                    items:
                      type: string
              - properties:
                  command:
                    title: Command to execute in shell environment
                    description: |
                      This property represents the stringified version of the executable and its arguments that is
                      passed as a parameter the the shell.
                    type: string
                  shell:
                    title: Shell path to use
                    description: |
                      This property represents the shell path that is going to be executed with a command. On Linux
                      and other Unix systems, the /bin/sh is used by default. On Windows cmd.exe is used by default.
                    type: string
      - properties:
          signal:
            title: Signal sandbox hook
            description: |
              The signal sent to the sandbox service. It uses the service PID to send the signal. Note that the service
              needs to be running; hence, it can't be used for the start hook.
            type: [string, integer]

  commonSandbox:
    title: Common sandbox
    description: |
      This object defines a set of common sandbox properties and it is a base sandbox for all sandboxes. Currently
      a set of hooks is common to all sandboxes.
    type: object
    properties:
      available:
        title: Availability switch
        description: |
          This property specifies whether the sandbox is available. It is usually used to disable some sandboxes
          on server platforms that have no availability for them (e.g. RHEL containers).
      dirs:
        title: Sandbox directories
        description: |
          The directories for various servers and service files.
        type: object
        properties:
          conf:
            title: Configuration directory
            description: This is used as a base directory for all server configuration files. Usually /etc on Linux.
            type: string
          run:
            title: Runtime directory
            description: This is used for system runtime files. For example PID files should be stored here.
            type: string
          script:
            title: Script directory
            description: |
              This is used as a base directory for all service script files. For example for web server, the web root
              directory would be used
            type: string
      hooks:
        title: Sandbox hooks
        description: |
          Those lifecycle hooks are called when even specified in the object key happens. Currently start, stop, restart
          and reload hooks can be defined.
        type: object
        properties:
          reload:
            $ref: '#/$defs/sandboxHook'
          restart:
            $ref: '#/$defs/sandboxHook'
          start:
            $ref: '#/$defs/sandboxHook'
          stop:
            $ref: '#/$defs/sandboxHook'

  containerRegistry:
    title: Container registry
    description: |
      This property is used to pull and push images from and to the registry.
    type: object
    properties:
      auth:
        title: Registry authentication credentials
        type: object
        properties:
          username:
            title: Registry user username
            type: string
          password:
            title: Registry user password
            type: string

  containerSandbox:
    title: Container sandbox
    description: |
      The container sandbox serves as a base sandbox for all sandboxes that run OCI containers.
    allOf:
      - $ref: '#/$defs/commonSandbox'
      - title: Container specific properties
        type: object
        properties:
          image:
            oneOf:
              - title: Image name and tag
                type: string
              - type: object
                properties:
                  name:
                    title: Image name
                    type: string
                  tag:
                    title: Image tag
                    type: string
          registry:
            $ref: '#/$defs/containerRegistry'


  sandboxes:
    title: Sandboxes definitions
    description: |
      Sandboxes can be specified either as an object defining the used sandboxes or as a string representing a path to
      fetch sandbox definitions from.
    type: [ object, string ]
    properties:
      common:
        $ref: '#/$defs/commonSandbox'
      local:
        $ref: '#/$defs/commonSandbox'
      docker:
        $ref: '#/$defs/containerSandbox'
      kubernetes:
        allOf:
          - $ref: '#/$defs/containerSandbox'
          - type: object
            properties:
              auth:
                title: Kubernetes authentication
                type: object
                properties:
                  kubeconfig:
                    title: Kubernetes config file path
                    type: string

  server:
    title: Server
    description: |
      A server can be specified either as an object defining the server properties or as a server name string.
    type: [ object, string ]
    properties:
      extends:
        title: Parent server name
        description: |
          This property selects the parent server to inherit properties from.
        type: string
      name:
        title: Server name
        type: string
      tag:
        title: Server tag
        description: The tag is used if not part of the name as a server tag.
      user:
        title: Server user
        description: Default user for the server. If not set, then currently logged in user is used.
        type: string
      group:
        title: Server group
        description: Default group for the server. If not set, then currently logged in user group is used.
        type: string
      port:
        title: Server primary exported port
        description: This is meant only for container environments where the port is specific to the container.
        type: string
      configs:
        title: Configuration files
        type: object
        additionalProperties:
          type: object
          properties:
            file:
              type: string
            parameters:
              $ref: '#/$defs/parameters'
      actions:
        title: Custom actions
        description: |
          This property defines customized actions of the server that can be used by instances.
        type: object
        properties:
          expect:
            type: object
            additionalProperties:
              $ref: '#/$defs/serverExpectations'
      parameters:
        $ref: '#/$defs/parameters'
      sandboxes:
        $ref: '#/$defs/sandboxes'

  servers:
    title: Servers
    description: |
      Servers can be specified either as an object defining each server or as a string, which is a path to fetch
      server definitions from.
    type: [ object, string ]
    patternProperties:
      "^[a-z][a-z0-9-_]+$":
        $ref: '#/$defs/server'

  scripts:
    title: Scripts for inclusion in services
    description: |
      Scripts represent a set of files where the filename is an object key and its actual content is the value.
      These scripts can be linked to services.
    type: object
    additionalProperties:
      title: Script data and settings
      description: |
        The script primarily defines the content to be included within the service.
      type: [ object, string ]
      properties:
        content:
          title: Script content
          type: string
        path:
          title: Path to be stored
          description: |
            Denotes the path in the service sandbox where the script will be mounted. If not specified, the script's
            key will be used. This property is useful for long, complex paths, or paths that require templates.
        mode:
          title: File access mode
          description: Indicates the file's access mode, according to standard Unix permissions.
          type: [ string, integer ]
          default: '0644'
        parameters:
          $ref: '#/$defs/parameters'

  services:
    title: Set of instance-specific services
    description: |
      The services represent an object of services where the key is its name and the value is a service object.
    type: object
    additionalProperties:
      title: Service to run
      description: |
        The service is a combination of a server and a sandbox with a supplied configuration.
      type: object
      properties:
        server:
          title: Server to use
          description: |
            Server points to the server used by the service. As the server defines the configuration, it's
            important to ensure that a compatible server is used. The service name is used if the value isn't
            specified.
          type: object
          properties:
            name:
              title: Server name
              description: The name is used for selecting the server used by service.
            tag:
              title: Server tag
              description: The tag is used if not part of the name as a server tag.
            sandbox:
              title: Sandbox to use
              description: |
                Sandbox should define the server sandbox in which to run the service.
              type: string
              enum: [ local, docker, kubernetes ]
            configs:
              title: Configuration files to include
              description: |
                This object defines the configuration files that will be included from the server. The key is the
                configuration filename as defined in the server, and the value is the configuration object.
              type: object
              additionalProperties:
                type: [ object ]
                properties:
                  include:
                    title: Service inclusion switch
                    description: Whether the server config is going to be included to the service.
                    default: true
                  parameters:
                    $ref: '#/$defs/parameters'
        resources:
          title: Resource included in the service
          description: It is container for scripts and other resources defined in the future.
          type: object
          properties:
            scripts:
              title: Scripts included in the service
              description: |
                The scripts can have either a boolean or array value. If a boolean is provided, then 'true' means that
                all scripts are included in the service and 'false' means that no scripts will be included. If an array
                is provided, then only the listed scripts are included in the service.
              default: true
              type: [ array, boolean ]
              items:
                type: string
        requires:
          title: Required services
          description: |
            The list of services that has to be started before starting the service containing this property.  

  customExpectation:
    title: Custom expectation
    description: |
      The custom expectation that is taken from the service defined server.
    type: object
    properties:
      name:
        title: Custom expectation name
        description: The name is used for selecting the expectation from the server expectations.
      parameters:
        $ref: '#/$defs/parameters'

  actionExpectation:
    title: Expectation action
    description: |
      The expectation is an action type that checks whether the provided expectation type aligns with what's expected.
      It's usually used for pattern matching of response data or output from the logs.
    type: object
    allOf:
      - properties:
          service:
            title: Service name
            description: The service that the expectation is executed on.
            type: string
          timeout:
            title: Action timeout
            description: |
              This sets the action timeout in milliseconds and overwritten the default timeout. Negative value means
              unlimited and 0 means using the default value defined in the instance action timeout.
            type: integer
          when:
            title: When to run the action
            description: |
              This field specifies when the action should be executed. If `on_success` is selected, the action runs only
              if all previous actions have completed successfully. If `on_failure` is selected, the action runs only if
              at least one of the previous actions has failed. If `always` is selected, the action will run regardless
              of the success or failure of previous actions.
            type: string
            enum: [ always, on_success, on_failure ]
            default: on_success
      - oneOf:
          - properties:
              custom:
                $ref: '#/$defs/customExpectation'
          - properties:
              metrics:
                $ref: '#/$defs/metricsExpectation'
          - properties:
              output:
                $ref: '#/$defs/outputExpectation'
          - properties:
              response:
                $ref: '#/$defs/responseExpectation'

  actionBench:
    title: Benchmark action
    description: |
      The benchmark action defines the details of the benchmark done on to the service.
    type: object
    properties:
      service:
        title: Service name
        description: The service that the benchmark is executed on.
        type: string
      timeout:
        title: Action timeout
        description: |
          This sets the action timeout in milliseconds and overwritten the default timeout. Negative value means
          unlimited and 0 means using the default value defined in the instance action timeout.
        type: integer
      when:
        title: When to run the action
        description: |
          This field specifies when the action should be executed. If `on_success` is selected, the action runs only
          if all previous actions have completed successfully. If `on_failure` is selected, the action runs only if
          at least one of the previous actions has failed. If `always` is selected, the action will run regardless
          of the success or failure of previous actions.
        type: string
        enum: [ always, on_success, on_failure ]
        default: on_success
      id:
        title: Benchmark ID
        description: |
          Identifies benchmark which is use as identifier for storing metrics. This can be then used in metrics
          expectation.
        type: string
        default: last
      path:
        title: Benchmark request path
        description: Request URL path used for benchmark which can also contain query parameters.
        type: string
        default: /
      encode_path:
        title: Whether the path should be URL encoded
        description: |
          There are test cases when it is convenient to pass not URL encoded path and this is the option to disabled it.
        type: boolean
        default: true
      method:
        title: Benchmark request method
        type: string
        enum: [ GET, HEAD, POST, PUT, PATCH, DELETE, PURGE ]
        default: GET
      headers:
        $ref: '#/$defs/headers'
      frequency:
        title: Benchmark request rate frequency
        description: The frequency specifies number of requests send per second.
        type: integer
      duration:
        title: Benchmark request duration
        description: The length of benchmark in milliseconds.
        type: integer

  actionRequest:
    title: Request action
    description: |
      The request action defines the details of the request to be sent to the service.
    type: object
    properties:
      service:
        title: Service name
        description: The service that the request is executed on.
        type: string
      timeout:
        title: Action timeout
        description: |
          This sets the action timeout in milliseconds and overwritten the default timeout. Negative value means
          unlimited and 0 means using the default value defined in the instance action timeout.
        type: integer
      when:
        title: When to run the action
        description: |
          This field specifies when the action should be executed. If `on_success` is selected, the action runs only
          if all previous actions have completed successfully. If `on_failure` is selected, the action runs only if
          at least one of the previous actions has failed. If `always` is selected, the action will run regardless
          of the success or failure of previous actions.
        type: string
        enum: [ always, on_success, on_failure ]
        default: on_success
      id:
        title: Request ID
        description: Identifies request which can be then used in response expectation.
        type: string
        default: last
      path:
        title: Request path
        description: Request URL path which can also contain query parameters.
        type: string
        default: /
      method:
        title: Request method
        type: string
        enum: [ GET, HEAD, POST, PUT, PATCH, DELETE, PURGE ]
        default: GET
      headers:
        $ref: '#/$defs/headers'

  actionRestart:
    title: Restart services
    description: |
      The restart action starts the selected or all services.
    type: object
    properties:
      service:
        title: Service name to restart
        description: |
          The service that is going to be restarted. If neither service nor services is specified, then all services are
          going to be restarted.
        type: string
      services:
        title: List of service names to restart
        description: |
          The services that are going to be restarted. If neither service nor services is specified, then all services
          are going to be restarted.
        type: array
        items:
          type: string
      timeout:
        title: Action timeout
        description: |
          This sets the action timeout in milliseconds and overwritten the default timeout. Negative value means
          unlimited and 0 means using the default value defined in the instance action timeout.
        type: integer
      when:
        title: When to run the action
        description: |
          This field specifies when the action should be executed. If `on_success` is selected, the action runs only
          if all previous actions have completed successfully. If `on_failure` is selected, the action runs only if
          at least one of the previous actions has failed. If `always` is selected, the action will run regardless
          of the success or failure of previous actions.
        type: string
        enum: [ always, on_success, on_failure ]
        default: on_success
      reload:
        title: Reload services
        description: |
          The reload flag indicates to service to use reload method rather than a complete restart if possible. This is
          supported only by some sandboxes (usually not supported by container services).
        type: boolean
        default: false

  actionStart:
    title: Start action
    description: |
      The start action starts the selected or all services.
    type: object
    properties:
      service:
        title: Service name to start
        description: |
          The service that is going to be started. If neither service nor services is specified, then all services are
          going to be started.
        type: string
      services:
        title: List of service names to start
        description: |
          The services that are going to be started. If neither service nor services is specified, then all services are
          started.
        type: array
        items:
          type: string
      timeout:
        title: Action timeout
        description: |
          This sets the action timeout in milliseconds and overwritten the default timeout. Negative value means
          unlimited and 0 means using the default value defined in the instance action timeout.
        type: integer
      when:
        title: When to run the action
        description: |
          This field specifies when the action should be executed. If `on_success` is selected, the action runs only
          if all previous actions have completed successfully. If `on_failure` is selected, the action runs only if
          at least one of the previous actions has failed. If `always` is selected, the action will run regardless
          of the success or failure of previous actions.
        type: string
        enum: [ always, on_success, on_failure ]
        default: on_success

  actionStop:
    title: Stop action
    description: |
      The stop action stops the selected or all services.
    type: object
    properties:
      service:
        title: Service name to stop
        description: |
          The service that is going to be stopped. If neither service nor services is specified, then all services are
          going to be stopped.
        type: string
      services:
        title: List of service names to stop
        description: |
          The services that are going to be stopped. If neither service nor services is specified, then all services are
          going to be stopped.
        type: array
        items:
          type: string
      timeout:
        title: Action timeout
        description: |
          This sets the action timeout in milliseconds and overwritten the default timeout. Negative value means
          unlimited and 0 means using the default value defined in the instance action timeout.
        type: integer
      when:
        title: When to run the action
        description: |
          This field specifies when the action should be executed. If `on_success` is selected, the action runs only
          if all previous actions have completed successfully. If `on_failure` is selected, the action runs only if
          at least one of the previous actions has failed. If `always` is selected, the action will run regardless
          of the success or failure of previous actions.
        type: string
        enum: [ always, on_success, on_failure ]
        default: always
      await:
        title: Whether to await stopping of service
        description: |
          Await stopping of service by periodically checking if the service task is alive.
        type: boolean
        default: true

  actionItem:
    title: Action item
    description: |
      Each item can either represent a predefined action (as a string) or a custom action (as an object). When using
      predefined actions like expectations and requests, the action names are given as strings with its constituent
      parts separated by slashes.
      
      When these items are executed, if any failure occurs, the execution is halted and the error is reported. In some
      cases, an action may generate a result value that can be utilized by subsequent action items.
      
      Among these actions, there are two special types. The 'not' action performs a logical negation on the result of
      the action item it is associated with. This means if the associated action fails, it is treated as a success and
      the execution of further items continues without reporting an error.
      The 'parallel' action takes an array of actions and executes them simultaneously. The 'parallel' action only
      completes when the last of its parallel actions ends. If any action within 'parallel' fails, that particular
      action is stopped, but others continue their execution.
    type: [ object, string ]
    properties:
      not:
        $ref: '#/$defs/actionItem'
      parallel:
        $ref: '#/$defs/actions'
    patternProperties:
      "^bench/.*":
        $ref: '#/$defs/actionBench'
      "^expect/.*":
        $ref: '#/$defs/actionExpectation'
      "^request/.*":
        $ref: '#/$defs/actionRequest'
      "^restart/?.*":
        $ref: '#/$defs/actionRestart'
      "^start/?.*":
        $ref: '#/$defs/actionStart'
      "^stop/?.*":
        $ref: '#/$defs/actionStop'

  actions:
    title: Array of actions to run
    description: |
      Actions form the core of the execution. They define the full workflow that's being executed and utilize
      services to carry out the actual work. Actions specify the particular activities that occur, such as sending
      a request or verifying expectations.
    type: array
    items:
      $ref: '#/$defs/actionItem'

  instance:
    title: Instance object
    description: |
      The instance defines the scripts, services, and actions used on them. It can be used for defining tests and
      other tasks.
    type: object
    properties:
      name:
        title: Instance name
        description: |
          The name is used for reporting which is mainly useful when more instances are used. If not specified, the
          name is generated from instance index and file name.
        type: string
      title:
        title: Instance title
        description: |
          The title is meant as a user friendly name for the instance. It should be capitalized and words separated by
          spaces.
      description:
        title: Instance description
        description: |
          The description should be a text describing what the instance is for and any useful notes including links to
          the related resources. Markdown should be used for formatting.
        type: string
      labels:
        title: Instance labels
        description: |
          The list of labels that could be used for searching between instances.
        type: array
        items:
          type: string
      abstract:
        title: Abstract instance flag
        description: |
          The abstract instance can be only extended and cannot be executed on its own.
        type: boolean
      extends:
        title: Parent instance and the supplied parameters
        description: |
          This property selects the parent instance from which environments, resources, services, and actions are
          inherited. If only a string is specified, it is equivalent to specifying the name with the string value and
          empty parameters. Parameters, if provided, can be used to customize the parent instance. This helps reduce
          configuration duplication.
        type: object|string
        properties:
          name:
            title: Parent instance name
            description: The name needs match the name of the instance that should be extended.
            type: string
          parameters:
            $ref: '#/$defs/parameters'
      parameters:
        $ref: '#/$defs/parameters'
      environments:
        $ref: '#/$defs/environments'
      resources:
        title: Resource data
        description: |
          The resources are data mounted to the service.
        type: object
        properties:
          scripts:
            $ref: '#/$defs/scripts'
      services:
        $ref: '#/$defs/services'
      timeouts:
        title: Timeouts
        type: object
        properties:
          action:
            title: Action timeout
            description: |
              This sets the default action timeout in milliseconds. It can be overwritten in each action. Negative value
              means unlimited and zero means that it gets set from the global spec time outs.
            type: integer
            default: 0
          actions:
            title: Actions total timeout
            description: |
              This sets the total timeout on running all actions. Default is 0 which means unlimited
            type: integer
            default: 0

      actions:
        $ref: '#/$defs/actions'

  spec:
    title: Specification container
    description: |
      The specification contains the configuration, including a set of instances, that specify the actual tasks that
      are going to be executed.
    type: object
    properties:
      environments:
        $ref: '#/$defs/environments'
      instances:
        title: Spec instances
        description: |
          If an array is provided, it contains an array of instance objects that describe the work going to be done.
          If a string is provided, it's a directory or wildcard path containing a set of instances. In this case,
          each file represents a single instance, with the same structure as an instance object.
        type: [ array, string ]
        items:
          $ref: '#/$defs/instance'
      sandboxes:
        $ref: '#/$defs/sandboxes'
      servers:
        $ref: '#/$defs/servers'
      defaults:
        title: Spec default values
        description: |
          The defaults allow setting global default values that can be easily overwritten. This is especially useful for
          changing environments without changing each instance. It also allow setting global parameters and action
          timeouts so those values do not have to be set repeatedly.
        type: object
        properties:
          service:
            title: Service default values
            description: |
              The service is used to change environments for each service that does not define it explicitly.
            type: object
            properties:
              sandbox:
                title: Default service sandbox
                description: |
                  The default sandbox is used to set a sandbox that will be used for all services not specifying the
                  sandbox explicitly.
                default: local
                type: string
                enum: [ local, docker, kubernetes ]
              server:
                title: Default service server options
                description: |
                  The default service server allows setting some global customization for the server that can be changed
                  globally.
                type: object
                properties:
                  tag:
                    title: Default service server tag
                    description: |
                      The default service server tag allows setting tag for all service servers that do not define tag
                      explicitly or set it in the server name.
                    default: default
                    type: string
          timeouts:
            title: Default timeouts
            type: object
            properties:
              action:
                title: Action timeout
                description: |
                  This sets the default action timeout in milliseconds. It can be overwritten in each action. Negative
                  value or 0 means unlimited.
                type: integer
                default: 30000
              actions:
                title: Actions total timeout
                description: |
                  This sets the total timeout on running all actions. Default is 0 which means unlimited
                type: integer
                default: 0
          parameters:
            $ref: '#/$defs/parameters'
      workspace:
        title: Workspace location
        description: |
          The workspace is a location where all the configuration and scripts are rendered from templates. It should
          be a directory, and this directory should be ignored by the version control system (e.g., git).
        type: string
