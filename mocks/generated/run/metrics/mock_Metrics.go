// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metrics

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/run/metrics"
)

// NewMockMetrics creates a new instance of MockMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetrics {
	mock := &MockMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetrics is an autogenerated mock type for the Metrics type
type MockMetrics struct {
	mock.Mock
}

type MockMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetrics) EXPECT() *MockMetrics_Expecter {
	return &MockMetrics_Expecter{mock: &_m.Mock}
}

// Find provides a mock function for the type MockMetrics
func (_mock *MockMetrics) Find(name string) (metrics.Metric, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 metrics.Metric
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (metrics.Metric, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) metrics.Metric); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Metric)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetrics_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockMetrics_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - name string
func (_e *MockMetrics_Expecter) Find(name interface{}) *MockMetrics_Find_Call {
	return &MockMetrics_Find_Call{Call: _e.mock.On("Find", name)}
}

func (_c *MockMetrics_Find_Call) Run(run func(name string)) *MockMetrics_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetrics_Find_Call) Return(metric metrics.Metric, err error) *MockMetrics_Find_Call {
	_c.Call.Return(metric, err)
	return _c
}

func (_c *MockMetrics_Find_Call) RunAndReturn(run func(name string) (metrics.Metric, error)) *MockMetrics_Find_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function for the type MockMetrics
func (_mock *MockMetrics) String() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockMetrics_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockMetrics_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockMetrics_Expecter) String() *MockMetrics_String_Call {
	return &MockMetrics_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockMetrics_String_Call) Run(run func()) *MockMetrics_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetrics_String_Call) Return(s string) *MockMetrics_String_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockMetrics_String_Call) RunAndReturn(run func() string) *MockMetrics_String_Call {
	_c.Call.Return(run)
	return _c
}
