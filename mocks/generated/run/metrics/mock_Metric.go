// Code generated by mockery v2.40.1. DO NOT EDIT.

package metrics

import (
	mock "github.com/stretchr/testify/mock"
	metrics "github.com/wstool/wst/run/metrics"
)

// MockMetric is an autogenerated mock type for the Metric type
type MockMetric struct {
	mock.Mock
}

type MockMetric_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetric) EXPECT() *MockMetric_Expecter {
	return &MockMetric_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function with given fields: operator, value
func (_m *MockMetric) Compare(operator metrics.MetricOperator, value float64) (bool, error) {
	ret := _m.Called(operator, value)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(metrics.MetricOperator, float64) (bool, error)); ok {
		return rf(operator, value)
	}
	if rf, ok := ret.Get(0).(func(metrics.MetricOperator, float64) bool); ok {
		r0 = rf(operator, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(metrics.MetricOperator, float64) error); ok {
		r1 = rf(operator, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMetric_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type MockMetric_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - operator metrics.MetricOperator
//   - value float64
func (_e *MockMetric_Expecter) Compare(operator interface{}, value interface{}) *MockMetric_Compare_Call {
	return &MockMetric_Compare_Call{Call: _e.mock.On("Compare", operator, value)}
}

func (_c *MockMetric_Compare_Call) Run(run func(operator metrics.MetricOperator, value float64)) *MockMetric_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metrics.MetricOperator), args[1].(float64))
	})
	return _c
}

func (_c *MockMetric_Compare_Call) Return(_a0 bool, _a1 error) *MockMetric_Compare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetric_Compare_Call) RunAndReturn(run func(metrics.MetricOperator, float64) (bool, error)) *MockMetric_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetric creates a new instance of MockMetric. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetric(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetric {
	mock := &MockMetric{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
