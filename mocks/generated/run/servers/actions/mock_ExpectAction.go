// Code generated by mockery v2.40.1. DO NOT EDIT.

package actions

import (
	mock "github.com/stretchr/testify/mock"
	expectations "github.com/wstool/wst/run/expectations"

	parameters "github.com/wstool/wst/run/parameters"
)

// MockExpectAction is an autogenerated mock type for the ExpectAction type
type MockExpectAction struct {
	mock.Mock
}

type MockExpectAction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExpectAction) EXPECT() *MockExpectAction_Expecter {
	return &MockExpectAction_Expecter{mock: &_m.Mock}
}

// OutputExpectation provides a mock function with given fields:
func (_m *MockExpectAction) OutputExpectation() *expectations.OutputExpectation {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OutputExpectation")
	}

	var r0 *expectations.OutputExpectation
	if rf, ok := ret.Get(0).(func() *expectations.OutputExpectation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expectations.OutputExpectation)
		}
	}

	return r0
}

// MockExpectAction_OutputExpectation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OutputExpectation'
type MockExpectAction_OutputExpectation_Call struct {
	*mock.Call
}

// OutputExpectation is a helper method to define mock.On call
func (_e *MockExpectAction_Expecter) OutputExpectation() *MockExpectAction_OutputExpectation_Call {
	return &MockExpectAction_OutputExpectation_Call{Call: _e.mock.On("OutputExpectation")}
}

func (_c *MockExpectAction_OutputExpectation_Call) Run(run func()) *MockExpectAction_OutputExpectation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExpectAction_OutputExpectation_Call) Return(_a0 *expectations.OutputExpectation) *MockExpectAction_OutputExpectation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExpectAction_OutputExpectation_Call) RunAndReturn(run func() *expectations.OutputExpectation) *MockExpectAction_OutputExpectation_Call {
	_c.Call.Return(run)
	return _c
}

// Parameters provides a mock function with given fields:
func (_m *MockExpectAction) Parameters() parameters.Parameters {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parameters")
	}

	var r0 parameters.Parameters
	if rf, ok := ret.Get(0).(func() parameters.Parameters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(parameters.Parameters)
		}
	}

	return r0
}

// MockExpectAction_Parameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parameters'
type MockExpectAction_Parameters_Call struct {
	*mock.Call
}

// Parameters is a helper method to define mock.On call
func (_e *MockExpectAction_Expecter) Parameters() *MockExpectAction_Parameters_Call {
	return &MockExpectAction_Parameters_Call{Call: _e.mock.On("Parameters")}
}

func (_c *MockExpectAction_Parameters_Call) Run(run func()) *MockExpectAction_Parameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExpectAction_Parameters_Call) Return(_a0 parameters.Parameters) *MockExpectAction_Parameters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExpectAction_Parameters_Call) RunAndReturn(run func() parameters.Parameters) *MockExpectAction_Parameters_Call {
	_c.Call.Return(run)
	return _c
}

// ResponseExpectation provides a mock function with given fields:
func (_m *MockExpectAction) ResponseExpectation() *expectations.ResponseExpectation {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResponseExpectation")
	}

	var r0 *expectations.ResponseExpectation
	if rf, ok := ret.Get(0).(func() *expectations.ResponseExpectation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expectations.ResponseExpectation)
		}
	}

	return r0
}

// MockExpectAction_ResponseExpectation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResponseExpectation'
type MockExpectAction_ResponseExpectation_Call struct {
	*mock.Call
}

// ResponseExpectation is a helper method to define mock.On call
func (_e *MockExpectAction_Expecter) ResponseExpectation() *MockExpectAction_ResponseExpectation_Call {
	return &MockExpectAction_ResponseExpectation_Call{Call: _e.mock.On("ResponseExpectation")}
}

func (_c *MockExpectAction_ResponseExpectation_Call) Run(run func()) *MockExpectAction_ResponseExpectation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExpectAction_ResponseExpectation_Call) Return(_a0 *expectations.ResponseExpectation) *MockExpectAction_ResponseExpectation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExpectAction_ResponseExpectation_Call) RunAndReturn(run func() *expectations.ResponseExpectation) *MockExpectAction_ResponseExpectation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExpectAction creates a new instance of MockExpectAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExpectAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExpectAction {
	mock := &MockExpectAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
