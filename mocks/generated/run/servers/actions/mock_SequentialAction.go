// Code generated by mockery v2.40.1. DO NOT EDIT.

package actions

import (
	mock "github.com/stretchr/testify/mock"
	types "github.com/wstool/wst/conf/types"
)

// MockSequentialAction is an autogenerated mock type for the SequentialAction type
type MockSequentialAction struct {
	mock.Mock
}

type MockSequentialAction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSequentialAction) EXPECT() *MockSequentialAction_Expecter {
	return &MockSequentialAction_Expecter{mock: &_m.Mock}
}

// Actions provides a mock function with given fields:
func (_m *MockSequentialAction) Actions() []types.Action {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Actions")
	}

	var r0 []types.Action
	if rf, ok := ret.Get(0).(func() []types.Action); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Action)
		}
	}

	return r0
}

// MockSequentialAction_Actions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Actions'
type MockSequentialAction_Actions_Call struct {
	*mock.Call
}

// Actions is a helper method to define mock.On call
func (_e *MockSequentialAction_Expecter) Actions() *MockSequentialAction_Actions_Call {
	return &MockSequentialAction_Actions_Call{Call: _e.mock.On("Actions")}
}

func (_c *MockSequentialAction_Actions_Call) Run(run func()) *MockSequentialAction_Actions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSequentialAction_Actions_Call) Return(_a0 []types.Action) *MockSequentialAction_Actions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSequentialAction_Actions_Call) RunAndReturn(run func() []types.Action) *MockSequentialAction_Actions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSequentialAction creates a new instance of MockSequentialAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSequentialAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSequentialAction {
	mock := &MockSequentialAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
