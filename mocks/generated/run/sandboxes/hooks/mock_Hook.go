// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package hooks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/run/environments/environment"
	"github.com/wstool/wst/run/environments/task"
	"github.com/wstool/wst/run/services/template"
)

// NewMockHook creates a new instance of MockHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHook {
	mock := &MockHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHook is an autogenerated mock type for the Hook type
type MockHook struct {
	mock.Mock
}

type MockHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHook) EXPECT() *MockHook_Expecter {
	return &MockHook_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type MockHook
func (_mock *MockHook) Execute(ctx context.Context, ss *environment.ServiceSettings, tmpl template.Template, env environment.Environment, st task.Task) (task.Task, error) {
	ret := _mock.Called(ctx, ss, tmpl, env, st)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 task.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *environment.ServiceSettings, template.Template, environment.Environment, task.Task) (task.Task, error)); ok {
		return returnFunc(ctx, ss, tmpl, env, st)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *environment.ServiceSettings, template.Template, environment.Environment, task.Task) task.Task); ok {
		r0 = returnFunc(ctx, ss, tmpl, env, st)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *environment.ServiceSettings, template.Template, environment.Environment, task.Task) error); ok {
		r1 = returnFunc(ctx, ss, tmpl, env, st)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHook_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockHook_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - ss *environment.ServiceSettings
//   - tmpl template.Template
//   - env environment.Environment
//   - st task.Task
func (_e *MockHook_Expecter) Execute(ctx interface{}, ss interface{}, tmpl interface{}, env interface{}, st interface{}) *MockHook_Execute_Call {
	return &MockHook_Execute_Call{Call: _e.mock.On("Execute", ctx, ss, tmpl, env, st)}
}

func (_c *MockHook_Execute_Call) Run(run func(ctx context.Context, ss *environment.ServiceSettings, tmpl template.Template, env environment.Environment, st task.Task)) *MockHook_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *environment.ServiceSettings
		if args[1] != nil {
			arg1 = args[1].(*environment.ServiceSettings)
		}
		var arg2 template.Template
		if args[2] != nil {
			arg2 = args[2].(template.Template)
		}
		var arg3 environment.Environment
		if args[3] != nil {
			arg3 = args[3].(environment.Environment)
		}
		var arg4 task.Task
		if args[4] != nil {
			arg4 = args[4].(task.Task)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockHook_Execute_Call) Return(task1 task.Task, err error) *MockHook_Execute_Call {
	_c.Call.Return(task1, err)
	return _c
}

func (_c *MockHook_Execute_Call) RunAndReturn(run func(ctx context.Context, ss *environment.ServiceSettings, tmpl template.Template, env environment.Environment, st task.Task) (task.Task, error)) *MockHook_Execute_Call {
	_c.Call.Return(run)
	return _c
}
