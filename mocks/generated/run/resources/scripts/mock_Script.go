// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package scripts

import (
	"os"

	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/run/parameters"
)

// NewMockScript creates a new instance of MockScript. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScript(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScript {
	mock := &MockScript{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockScript is an autogenerated mock type for the Script type
type MockScript struct {
	mock.Mock
}

type MockScript_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScript) EXPECT() *MockScript_Expecter {
	return &MockScript_Expecter{mock: &_m.Mock}
}

// Content provides a mock function for the type MockScript
func (_mock *MockScript) Content() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Content")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockScript_Content_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Content'
type MockScript_Content_Call struct {
	*mock.Call
}

// Content is a helper method to define mock.On call
func (_e *MockScript_Expecter) Content() *MockScript_Content_Call {
	return &MockScript_Content_Call{Call: _e.mock.On("Content")}
}

func (_c *MockScript_Content_Call) Run(run func()) *MockScript_Content_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScript_Content_Call) Return(s string) *MockScript_Content_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockScript_Content_Call) RunAndReturn(run func() string) *MockScript_Content_Call {
	_c.Call.Return(run)
	return _c
}

// Mode provides a mock function for the type MockScript
func (_mock *MockScript) Mode() os.FileMode {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Mode")
	}

	var r0 os.FileMode
	if returnFunc, ok := ret.Get(0).(func() os.FileMode); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(os.FileMode)
	}
	return r0
}

// MockScript_Mode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mode'
type MockScript_Mode_Call struct {
	*mock.Call
}

// Mode is a helper method to define mock.On call
func (_e *MockScript_Expecter) Mode() *MockScript_Mode_Call {
	return &MockScript_Mode_Call{Call: _e.mock.On("Mode")}
}

func (_c *MockScript_Mode_Call) Run(run func()) *MockScript_Mode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScript_Mode_Call) Return(v os.FileMode) *MockScript_Mode_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockScript_Mode_Call) RunAndReturn(run func() os.FileMode) *MockScript_Mode_Call {
	_c.Call.Return(run)
	return _c
}

// Parameters provides a mock function for the type MockScript
func (_mock *MockScript) Parameters() parameters.Parameters {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parameters")
	}

	var r0 parameters.Parameters
	if returnFunc, ok := ret.Get(0).(func() parameters.Parameters); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(parameters.Parameters)
		}
	}
	return r0
}

// MockScript_Parameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parameters'
type MockScript_Parameters_Call struct {
	*mock.Call
}

// Parameters is a helper method to define mock.On call
func (_e *MockScript_Expecter) Parameters() *MockScript_Parameters_Call {
	return &MockScript_Parameters_Call{Call: _e.mock.On("Parameters")}
}

func (_c *MockScript_Parameters_Call) Run(run func()) *MockScript_Parameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScript_Parameters_Call) Return(parameters1 parameters.Parameters) *MockScript_Parameters_Call {
	_c.Call.Return(parameters1)
	return _c
}

func (_c *MockScript_Parameters_Call) RunAndReturn(run func() parameters.Parameters) *MockScript_Parameters_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function for the type MockScript
func (_mock *MockScript) Path() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockScript_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockScript_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockScript_Expecter) Path() *MockScript_Path_Call {
	return &MockScript_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockScript_Path_Call) Run(run func()) *MockScript_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScript_Path_Call) Return(s string) *MockScript_Path_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockScript_Path_Call) RunAndReturn(run func() string) *MockScript_Path_Call {
	_c.Call.Return(run)
	return _c
}
