// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package certificates

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockCertificate creates a new instance of MockCertificate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCertificate(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCertificate {
	mock := &MockCertificate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCertificate is an autogenerated mock type for the Certificate type
type MockCertificate struct {
	mock.Mock
}

type MockCertificate_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCertificate) EXPECT() *MockCertificate_Expecter {
	return &MockCertificate_Expecter{mock: &_m.Mock}
}

// CertificateData provides a mock function for the type MockCertificate
func (_mock *MockCertificate) CertificateData() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertificateData")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCertificate_CertificateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificateData'
type MockCertificate_CertificateData_Call struct {
	*mock.Call
}

// CertificateData is a helper method to define mock.On call
func (_e *MockCertificate_Expecter) CertificateData() *MockCertificate_CertificateData_Call {
	return &MockCertificate_CertificateData_Call{Call: _e.mock.On("CertificateData")}
}

func (_c *MockCertificate_CertificateData_Call) Run(run func()) *MockCertificate_CertificateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCertificate_CertificateData_Call) Return(s string) *MockCertificate_CertificateData_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCertificate_CertificateData_Call) RunAndReturn(run func() string) *MockCertificate_CertificateData_Call {
	_c.Call.Return(run)
	return _c
}

// CertificateName provides a mock function for the type MockCertificate
func (_mock *MockCertificate) CertificateName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertificateName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCertificate_CertificateName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificateName'
type MockCertificate_CertificateName_Call struct {
	*mock.Call
}

// CertificateName is a helper method to define mock.On call
func (_e *MockCertificate_Expecter) CertificateName() *MockCertificate_CertificateName_Call {
	return &MockCertificate_CertificateName_Call{Call: _e.mock.On("CertificateName")}
}

func (_c *MockCertificate_CertificateName_Call) Run(run func()) *MockCertificate_CertificateName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCertificate_CertificateName_Call) Return(s string) *MockCertificate_CertificateName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCertificate_CertificateName_Call) RunAndReturn(run func() string) *MockCertificate_CertificateName_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateKeyData provides a mock function for the type MockCertificate
func (_mock *MockCertificate) PrivateKeyData() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrivateKeyData")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCertificate_PrivateKeyData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateKeyData'
type MockCertificate_PrivateKeyData_Call struct {
	*mock.Call
}

// PrivateKeyData is a helper method to define mock.On call
func (_e *MockCertificate_Expecter) PrivateKeyData() *MockCertificate_PrivateKeyData_Call {
	return &MockCertificate_PrivateKeyData_Call{Call: _e.mock.On("PrivateKeyData")}
}

func (_c *MockCertificate_PrivateKeyData_Call) Run(run func()) *MockCertificate_PrivateKeyData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCertificate_PrivateKeyData_Call) Return(s string) *MockCertificate_PrivateKeyData_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCertificate_PrivateKeyData_Call) RunAndReturn(run func() string) *MockCertificate_PrivateKeyData_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateKeyName provides a mock function for the type MockCertificate
func (_mock *MockCertificate) PrivateKeyName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrivateKeyName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCertificate_PrivateKeyName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateKeyName'
type MockCertificate_PrivateKeyName_Call struct {
	*mock.Call
}

// PrivateKeyName is a helper method to define mock.On call
func (_e *MockCertificate_Expecter) PrivateKeyName() *MockCertificate_PrivateKeyName_Call {
	return &MockCertificate_PrivateKeyName_Call{Call: _e.mock.On("PrivateKeyName")}
}

func (_c *MockCertificate_PrivateKeyName_Call) Run(run func()) *MockCertificate_PrivateKeyName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCertificate_PrivateKeyName_Call) Return(s string) *MockCertificate_PrivateKeyName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCertificate_PrivateKeyName_Call) RunAndReturn(run func() string) *MockCertificate_PrivateKeyName_Call {
	_c.Call.Return(run)
	return _c
}
