// Code generated by mockery v2.40.1. DO NOT EDIT.

package spec

import mock "github.com/stretchr/testify/mock"

// MockSpec is an autogenerated mock type for the Spec type
type MockSpec struct {
	mock.Mock
}

type MockSpec_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpec) EXPECT() *MockSpec_Expecter {
	return &MockSpec_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: filteredInstances
func (_m *MockSpec) Run(filteredInstances []string) error {
	ret := _m.Called(filteredInstances)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(filteredInstances)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpec_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockSpec_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - filteredInstances []string
func (_e *MockSpec_Expecter) Run(filteredInstances interface{}) *MockSpec_Run_Call {
	return &MockSpec_Run_Call{Call: _e.mock.On("Run", filteredInstances)}
}

func (_c *MockSpec_Run_Call) Run(run func(filteredInstances []string)) *MockSpec_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockSpec_Run_Call) Return(_a0 error) *MockSpec_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpec_Run_Call) RunAndReturn(run func([]string) error) *MockSpec_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpec creates a new instance of MockSpec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpec(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpec {
	mock := &MockSpec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
