// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package clients

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
	v10 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

// NewMockPodClient creates a new instance of MockPodClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPodClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPodClient {
	mock := &MockPodClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPodClient is an autogenerated mock type for the PodClient type
type MockPodClient struct {
	mock.Mock
}

type MockPodClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPodClient) EXPECT() *MockPodClient_Expecter {
	return &MockPodClient_Expecter{mock: &_m.Mock}
}

// List provides a mock function for the type MockPodClient
func (_mock *MockPodClient) List(ctx context.Context, opts v1.ListOptions) (*v10.PodList, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v10.PodList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (*v10.PodList, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) *v10.PodList); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v10.PodList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPodClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockPodClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.ListOptions
func (_e *MockPodClient_Expecter) List(ctx interface{}, opts interface{}) *MockPodClient_List_Call {
	return &MockPodClient_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockPodClient_List_Call) Run(run func(ctx context.Context, opts v1.ListOptions)) *MockPodClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v1.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPodClient_List_Call) Return(podList *v10.PodList, err error) *MockPodClient_List_Call {
	_c.Call.Return(podList, err)
	return _c
}

func (_c *MockPodClient_List_Call) RunAndReturn(run func(ctx context.Context, opts v1.ListOptions) (*v10.PodList, error)) *MockPodClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// StreamLogs provides a mock function for the type MockPodClient
func (_mock *MockPodClient) StreamLogs(ctx context.Context, name string, opts *v10.PodLogOptions) (io.ReadCloser, error) {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for StreamLogs")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *v10.PodLogOptions) (io.ReadCloser, error)); ok {
		return returnFunc(ctx, name, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *v10.PodLogOptions) io.ReadCloser); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *v10.PodLogOptions) error); ok {
		r1 = returnFunc(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPodClient_StreamLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamLogs'
type MockPodClient_StreamLogs_Call struct {
	*mock.Call
}

// StreamLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts *v10.PodLogOptions
func (_e *MockPodClient_Expecter) StreamLogs(ctx interface{}, name interface{}, opts interface{}) *MockPodClient_StreamLogs_Call {
	return &MockPodClient_StreamLogs_Call{Call: _e.mock.On("StreamLogs", ctx, name, opts)}
}

func (_c *MockPodClient_StreamLogs_Call) Run(run func(ctx context.Context, name string, opts *v10.PodLogOptions)) *MockPodClient_StreamLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *v10.PodLogOptions
		if args[2] != nil {
			arg2 = args[2].(*v10.PodLogOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPodClient_StreamLogs_Call) Return(readCloser io.ReadCloser, err error) *MockPodClient_StreamLogs_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *MockPodClient_StreamLogs_Call) RunAndReturn(run func(ctx context.Context, name string, opts *v10.PodLogOptions) (io.ReadCloser, error)) *MockPodClient_StreamLogs_Call {
	_c.Call.Return(run)
	return _c
}
