// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package client

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/run/environments/environment/providers/docker/client"
)

// NewMockMaker creates a new instance of MockMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaker {
	mock := &MockMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMaker is an autogenerated mock type for the Maker type
type MockMaker struct {
	mock.Mock
}

type MockMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaker) EXPECT() *MockMaker_Expecter {
	return &MockMaker_Expecter{mock: &_m.Mock}
}

// Make provides a mock function for the type MockMaker
func (_mock *MockMaker) Make() (client.Client, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Make")
	}

	var r0 client.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (client.Client, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() client.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMaker_Make_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Make'
type MockMaker_Make_Call struct {
	*mock.Call
}

// Make is a helper method to define mock.On call
func (_e *MockMaker_Expecter) Make() *MockMaker_Make_Call {
	return &MockMaker_Make_Call{Call: _e.mock.On("Make")}
}

func (_c *MockMaker_Make_Call) Run(run func()) *MockMaker_Make_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMaker_Make_Call) Return(client1 client.Client, err error) *MockMaker_Make_Call {
	_c.Call.Return(client1, err)
	return _c
}

func (_c *MockMaker_Make_Call) RunAndReturn(run func() (client.Client, error)) *MockMaker_Make_Call {
	_c.Call.Return(run)
	return _c
}
