// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package output

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/run/environments/environment/output"
)

// NewMockMaker creates a new instance of MockMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaker {
	mock := &MockMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMaker is an autogenerated mock type for the Maker type
type MockMaker struct {
	mock.Mock
}

type MockMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaker) EXPECT() *MockMaker_Expecter {
	return &MockMaker_Expecter{mock: &_m.Mock}
}

// MakeCollector provides a mock function for the type MockMaker
func (_mock *MockMaker) MakeCollector(tid string) output.Collector {
	ret := _mock.Called(tid)

	if len(ret) == 0 {
		panic("no return value specified for MakeCollector")
	}

	var r0 output.Collector
	if returnFunc, ok := ret.Get(0).(func(string) output.Collector); ok {
		r0 = returnFunc(tid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(output.Collector)
		}
	}
	return r0
}

// MockMaker_MakeCollector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeCollector'
type MockMaker_MakeCollector_Call struct {
	*mock.Call
}

// MakeCollector is a helper method to define mock.On call
//   - tid string
func (_e *MockMaker_Expecter) MakeCollector(tid interface{}) *MockMaker_MakeCollector_Call {
	return &MockMaker_MakeCollector_Call{Call: _e.mock.On("MakeCollector", tid)}
}

func (_c *MockMaker_MakeCollector_Call) Run(run func(tid string)) *MockMaker_MakeCollector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMaker_MakeCollector_Call) Return(collector output.Collector) *MockMaker_MakeCollector_Call {
	_c.Call.Return(collector)
	return _c
}

func (_c *MockMaker_MakeCollector_Call) RunAndReturn(run func(tid string) output.Collector) *MockMaker_MakeCollector_Call {
	_c.Call.Return(run)
	return _c
}
