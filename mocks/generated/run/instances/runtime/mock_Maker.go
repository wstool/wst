// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package runtime

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/run/instances/runtime"
)

// NewMockMaker creates a new instance of MockMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaker {
	mock := &MockMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMaker is an autogenerated mock type for the Maker type
type MockMaker struct {
	mock.Mock
}

type MockMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaker) EXPECT() *MockMaker_Expecter {
	return &MockMaker_Expecter{mock: &_m.Mock}
}

// MakeBackgroundContext provides a mock function for the type MockMaker
func (_mock *MockMaker) MakeBackgroundContext() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeBackgroundContext")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockMaker_MakeBackgroundContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeBackgroundContext'
type MockMaker_MakeBackgroundContext_Call struct {
	*mock.Call
}

// MakeBackgroundContext is a helper method to define mock.On call
func (_e *MockMaker_Expecter) MakeBackgroundContext() *MockMaker_MakeBackgroundContext_Call {
	return &MockMaker_MakeBackgroundContext_Call{Call: _e.mock.On("MakeBackgroundContext")}
}

func (_c *MockMaker_MakeBackgroundContext_Call) Run(run func()) *MockMaker_MakeBackgroundContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMaker_MakeBackgroundContext_Call) Return(context1 context.Context) *MockMaker_MakeBackgroundContext_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockMaker_MakeBackgroundContext_Call) RunAndReturn(run func() context.Context) *MockMaker_MakeBackgroundContext_Call {
	_c.Call.Return(run)
	return _c
}

// MakeContextWithTimeout provides a mock function for the type MockMaker
func (_mock *MockMaker) MakeContextWithTimeout(ctx context.Context, timeout time.Duration) (context.Context, context.CancelFunc) {
	ret := _mock.Called(ctx, timeout)

	if len(ret) == 0 {
		panic("no return value specified for MakeContextWithTimeout")
	}

	var r0 context.Context
	var r1 context.CancelFunc
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration) (context.Context, context.CancelFunc)); ok {
		return returnFunc(ctx, timeout)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration) context.Context); ok {
		r0 = returnFunc(ctx, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Duration) context.CancelFunc); ok {
		r1 = returnFunc(ctx, timeout)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.CancelFunc)
		}
	}
	return r0, r1
}

// MockMaker_MakeContextWithTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeContextWithTimeout'
type MockMaker_MakeContextWithTimeout_Call struct {
	*mock.Call
}

// MakeContextWithTimeout is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
func (_e *MockMaker_Expecter) MakeContextWithTimeout(ctx interface{}, timeout interface{}) *MockMaker_MakeContextWithTimeout_Call {
	return &MockMaker_MakeContextWithTimeout_Call{Call: _e.mock.On("MakeContextWithTimeout", ctx, timeout)}
}

func (_c *MockMaker_MakeContextWithTimeout_Call) Run(run func(ctx context.Context, timeout time.Duration)) *MockMaker_MakeContextWithTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMaker_MakeContextWithTimeout_Call) Return(context1 context.Context, cancelFunc context.CancelFunc) *MockMaker_MakeContextWithTimeout_Call {
	_c.Call.Return(context1, cancelFunc)
	return _c
}

func (_c *MockMaker_MakeContextWithTimeout_Call) RunAndReturn(run func(ctx context.Context, timeout time.Duration) (context.Context, context.CancelFunc)) *MockMaker_MakeContextWithTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// MakeData provides a mock function for the type MockMaker
func (_mock *MockMaker) MakeData() runtime.Data {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeData")
	}

	var r0 runtime.Data
	if returnFunc, ok := ret.Get(0).(func() runtime.Data); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Data)
		}
	}
	return r0
}

// MockMaker_MakeData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeData'
type MockMaker_MakeData_Call struct {
	*mock.Call
}

// MakeData is a helper method to define mock.On call
func (_e *MockMaker_Expecter) MakeData() *MockMaker_MakeData_Call {
	return &MockMaker_MakeData_Call{Call: _e.mock.On("MakeData")}
}

func (_c *MockMaker_MakeData_Call) Run(run func()) *MockMaker_MakeData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMaker_MakeData_Call) Return(data runtime.Data) *MockMaker_MakeData_Call {
	_c.Call.Return(data)
	return _c
}

func (_c *MockMaker_MakeData_Call) RunAndReturn(run func() runtime.Data) *MockMaker_MakeData_Call {
	_c.Call.Return(run)
	return _c
}
