// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package runtime

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockData creates a new instance of MockData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockData(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockData {
	mock := &MockData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockData is an autogenerated mock type for the Data type
type MockData struct {
	mock.Mock
}

type MockData_Expecter struct {
	mock *mock.Mock
}

func (_m *MockData) EXPECT() *MockData_Expecter {
	return &MockData_Expecter{mock: &_m.Mock}
}

// Load provides a mock function for the type MockData
func (_mock *MockData) Load(key string) (interface{}, bool) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 interface{}
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockData_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockData_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - key string
func (_e *MockData_Expecter) Load(key interface{}) *MockData_Load_Call {
	return &MockData_Load_Call{Call: _e.mock.On("Load", key)}
}

func (_c *MockData_Load_Call) Run(run func(key string)) *MockData_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockData_Load_Call) Return(ifaceVal interface{}, b bool) *MockData_Load_Call {
	_c.Call.Return(ifaceVal, b)
	return _c
}

func (_c *MockData_Load_Call) RunAndReturn(run func(key string) (interface{}, bool)) *MockData_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function for the type MockData
func (_mock *MockData) Store(key string, value interface{}) error {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockData_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockData_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockData_Expecter) Store(key interface{}, value interface{}) *MockData_Store_Call {
	return &MockData_Store_Call{Call: _e.mock.On("Store", key, value)}
}

func (_c *MockData_Store_Call) Run(run func(key string, value interface{})) *MockData_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockData_Store_Call) Return(err error) *MockData_Store_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockData_Store_Call) RunAndReturn(run func(key string, value interface{}) error) *MockData_Store_Call {
	_c.Call.Return(run)
	return _c
}
