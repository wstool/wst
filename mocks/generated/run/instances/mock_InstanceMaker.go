// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package instances

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/conf/types"
	"github.com/wstool/wst/run/instances"
	"github.com/wstool/wst/run/servers"
	"github.com/wstool/wst/run/spec/defaults"
)

// NewMockInstanceMaker creates a new instance of MockInstanceMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInstanceMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInstanceMaker {
	mock := &MockInstanceMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInstanceMaker is an autogenerated mock type for the InstanceMaker type
type MockInstanceMaker struct {
	mock.Mock
}

type MockInstanceMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInstanceMaker) EXPECT() *MockInstanceMaker_Expecter {
	return &MockInstanceMaker_Expecter{mock: &_m.Mock}
}

// Make provides a mock function for the type MockInstanceMaker
func (_mock *MockInstanceMaker) Make(instanceConfig types.Instance, instanceId int, envsConfig map[string]types.Environment, dflts *defaults.Defaults, srvs servers.Servers, specWorkspace string) (instances.Instance, error) {
	ret := _mock.Called(instanceConfig, instanceId, envsConfig, dflts, srvs, specWorkspace)

	if len(ret) == 0 {
		panic("no return value specified for Make")
	}

	var r0 instances.Instance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(types.Instance, int, map[string]types.Environment, *defaults.Defaults, servers.Servers, string) (instances.Instance, error)); ok {
		return returnFunc(instanceConfig, instanceId, envsConfig, dflts, srvs, specWorkspace)
	}
	if returnFunc, ok := ret.Get(0).(func(types.Instance, int, map[string]types.Environment, *defaults.Defaults, servers.Servers, string) instances.Instance); ok {
		r0 = returnFunc(instanceConfig, instanceId, envsConfig, dflts, srvs, specWorkspace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(instances.Instance)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(types.Instance, int, map[string]types.Environment, *defaults.Defaults, servers.Servers, string) error); ok {
		r1 = returnFunc(instanceConfig, instanceId, envsConfig, dflts, srvs, specWorkspace)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInstanceMaker_Make_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Make'
type MockInstanceMaker_Make_Call struct {
	*mock.Call
}

// Make is a helper method to define mock.On call
//   - instanceConfig types.Instance
//   - instanceId int
//   - envsConfig map[string]types.Environment
//   - dflts *defaults.Defaults
//   - srvs servers.Servers
//   - specWorkspace string
func (_e *MockInstanceMaker_Expecter) Make(instanceConfig interface{}, instanceId interface{}, envsConfig interface{}, dflts interface{}, srvs interface{}, specWorkspace interface{}) *MockInstanceMaker_Make_Call {
	return &MockInstanceMaker_Make_Call{Call: _e.mock.On("Make", instanceConfig, instanceId, envsConfig, dflts, srvs, specWorkspace)}
}

func (_c *MockInstanceMaker_Make_Call) Run(run func(instanceConfig types.Instance, instanceId int, envsConfig map[string]types.Environment, dflts *defaults.Defaults, srvs servers.Servers, specWorkspace string)) *MockInstanceMaker_Make_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.Instance
		if args[0] != nil {
			arg0 = args[0].(types.Instance)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 map[string]types.Environment
		if args[2] != nil {
			arg2 = args[2].(map[string]types.Environment)
		}
		var arg3 *defaults.Defaults
		if args[3] != nil {
			arg3 = args[3].(*defaults.Defaults)
		}
		var arg4 servers.Servers
		if args[4] != nil {
			arg4 = args[4].(servers.Servers)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockInstanceMaker_Make_Call) Return(instance instances.Instance, err error) *MockInstanceMaker_Make_Call {
	_c.Call.Return(instance, err)
	return _c
}

func (_c *MockInstanceMaker_Make_Call) RunAndReturn(run func(instanceConfig types.Instance, instanceId int, envsConfig map[string]types.Environment, dflts *defaults.Defaults, srvs servers.Servers, specWorkspace string) (instances.Instance, error)) *MockInstanceMaker_Make_Call {
	_c.Call.Return(run)
	return _c
}
