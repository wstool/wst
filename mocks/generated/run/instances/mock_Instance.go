// Code generated by mockery v2.40.1. DO NOT EDIT.

package instances

import (
	action "github.com/wstool/wst/run/actions/action"
	instances "github.com/wstool/wst/run/instances"

	mock "github.com/stretchr/testify/mock"

	parameters "github.com/wstool/wst/run/parameters"

	time "time"
)

// MockInstance is an autogenerated mock type for the Instance type
type MockInstance struct {
	mock.Mock
}

type MockInstance_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInstance) EXPECT() *MockInstance_Expecter {
	return &MockInstance_Expecter{mock: &_m.Mock}
}

// Actions provides a mock function with given fields:
func (_m *MockInstance) Actions() []action.Action {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Actions")
	}

	var r0 []action.Action
	if rf, ok := ret.Get(0).(func() []action.Action); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]action.Action)
		}
	}

	return r0
}

// MockInstance_Actions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Actions'
type MockInstance_Actions_Call struct {
	*mock.Call
}

// Actions is a helper method to define mock.On call
func (_e *MockInstance_Expecter) Actions() *MockInstance_Actions_Call {
	return &MockInstance_Actions_Call{Call: _e.mock.On("Actions")}
}

func (_c *MockInstance_Actions_Call) Run(run func()) *MockInstance_Actions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstance_Actions_Call) Return(_a0 []action.Action) *MockInstance_Actions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstance_Actions_Call) RunAndReturn(run func() []action.Action) *MockInstance_Actions_Call {
	_c.Call.Return(run)
	return _c
}

// Extend provides a mock function with given fields: instsMap
func (_m *MockInstance) Extend(instsMap map[string]instances.Instance) error {
	ret := _m.Called(instsMap)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]instances.Instance) error); ok {
		r0 = rf(instsMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInstance_Extend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extend'
type MockInstance_Extend_Call struct {
	*mock.Call
}

// Extend is a helper method to define mock.On call
//   - instsMap map[string]instances.Instance
func (_e *MockInstance_Expecter) Extend(instsMap interface{}) *MockInstance_Extend_Call {
	return &MockInstance_Extend_Call{Call: _e.mock.On("Extend", instsMap)}
}

func (_c *MockInstance_Extend_Call) Run(run func(instsMap map[string]instances.Instance)) *MockInstance_Extend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]instances.Instance))
	})
	return _c
}

func (_c *MockInstance_Extend_Call) Return(_a0 error) *MockInstance_Extend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstance_Extend_Call) RunAndReturn(run func(map[string]instances.Instance) error) *MockInstance_Extend_Call {
	_c.Call.Return(run)
	return _c
}

// IsAbstract provides a mock function with given fields:
func (_m *MockInstance) IsAbstract() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAbstract")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockInstance_IsAbstract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAbstract'
type MockInstance_IsAbstract_Call struct {
	*mock.Call
}

// IsAbstract is a helper method to define mock.On call
func (_e *MockInstance_Expecter) IsAbstract() *MockInstance_IsAbstract_Call {
	return &MockInstance_IsAbstract_Call{Call: _e.mock.On("IsAbstract")}
}

func (_c *MockInstance_IsAbstract_Call) Run(run func()) *MockInstance_IsAbstract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstance_IsAbstract_Call) Return(_a0 bool) *MockInstance_IsAbstract_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstance_IsAbstract_Call) RunAndReturn(run func() bool) *MockInstance_IsAbstract_Call {
	_c.Call.Return(run)
	return _c
}

// IsChild provides a mock function with given fields:
func (_m *MockInstance) IsChild() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsChild")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockInstance_IsChild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsChild'
type MockInstance_IsChild_Call struct {
	*mock.Call
}

// IsChild is a helper method to define mock.On call
func (_e *MockInstance_Expecter) IsChild() *MockInstance_IsChild_Call {
	return &MockInstance_IsChild_Call{Call: _e.mock.On("IsChild")}
}

func (_c *MockInstance_IsChild_Call) Run(run func()) *MockInstance_IsChild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstance_IsChild_Call) Return(_a0 bool) *MockInstance_IsChild_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstance_IsChild_Call) RunAndReturn(run func() bool) *MockInstance_IsChild_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockInstance) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockInstance_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockInstance_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockInstance_Expecter) Name() *MockInstance_Name_Call {
	return &MockInstance_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockInstance_Name_Call) Run(run func()) *MockInstance_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstance_Name_Call) Return(_a0 string) *MockInstance_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstance_Name_Call) RunAndReturn(run func() string) *MockInstance_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Parameters provides a mock function with given fields:
func (_m *MockInstance) Parameters() parameters.Parameters {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parameters")
	}

	var r0 parameters.Parameters
	if rf, ok := ret.Get(0).(func() parameters.Parameters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(parameters.Parameters)
		}
	}

	return r0
}

// MockInstance_Parameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parameters'
type MockInstance_Parameters_Call struct {
	*mock.Call
}

// Parameters is a helper method to define mock.On call
func (_e *MockInstance_Expecter) Parameters() *MockInstance_Parameters_Call {
	return &MockInstance_Parameters_Call{Call: _e.mock.On("Parameters")}
}

func (_c *MockInstance_Parameters_Call) Run(run func()) *MockInstance_Parameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstance_Parameters_Call) Return(_a0 parameters.Parameters) *MockInstance_Parameters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstance_Parameters_Call) RunAndReturn(run func() parameters.Parameters) *MockInstance_Parameters_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields:
func (_m *MockInstance) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInstance_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockInstance_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockInstance_Expecter) Run() *MockInstance_Run_Call {
	return &MockInstance_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockInstance_Run_Call) Run(run func()) *MockInstance_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstance_Run_Call) Return(_a0 error) *MockInstance_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstance_Run_Call) RunAndReturn(run func() error) *MockInstance_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Timeout provides a mock function with given fields:
func (_m *MockInstance) Timeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Timeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockInstance_Timeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timeout'
type MockInstance_Timeout_Call struct {
	*mock.Call
}

// Timeout is a helper method to define mock.On call
func (_e *MockInstance_Expecter) Timeout() *MockInstance_Timeout_Call {
	return &MockInstance_Timeout_Call{Call: _e.mock.On("Timeout")}
}

func (_c *MockInstance_Timeout_Call) Run(run func()) *MockInstance_Timeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstance_Timeout_Call) Return(_a0 time.Duration) *MockInstance_Timeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstance_Timeout_Call) RunAndReturn(run func() time.Duration) *MockInstance_Timeout_Call {
	_c.Call.Return(run)
	return _c
}

// Workspace provides a mock function with given fields:
func (_m *MockInstance) Workspace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Workspace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockInstance_Workspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Workspace'
type MockInstance_Workspace_Call struct {
	*mock.Call
}

// Workspace is a helper method to define mock.On call
func (_e *MockInstance_Expecter) Workspace() *MockInstance_Workspace_Call {
	return &MockInstance_Workspace_Call{Call: _e.mock.On("Workspace")}
}

func (_c *MockInstance_Workspace_Call) Run(run func()) *MockInstance_Workspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstance_Workspace_Call) Return(_a0 string) *MockInstance_Workspace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstance_Workspace_Call) RunAndReturn(run func() string) *MockInstance_Workspace_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInstance creates a new instance of MockInstance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInstance(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInstance {
	mock := &MockInstance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
