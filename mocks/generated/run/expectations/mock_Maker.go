// Code generated by mockery v2.40.1. DO NOT EDIT.

package expectations

import (
	mock "github.com/stretchr/testify/mock"
	expectations "github.com/wstool/wst/run/expectations"

	types "github.com/wstool/wst/conf/types"
)

// MockMaker is an autogenerated mock type for the Maker type
type MockMaker struct {
	mock.Mock
}

type MockMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaker) EXPECT() *MockMaker_Expecter {
	return &MockMaker_Expecter{mock: &_m.Mock}
}

// MakeMetricsExpectation provides a mock function with given fields: config
func (_m *MockMaker) MakeMetricsExpectation(config *types.MetricsExpectation) (*expectations.MetricsExpectation, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for MakeMetricsExpectation")
	}

	var r0 *expectations.MetricsExpectation
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.MetricsExpectation) (*expectations.MetricsExpectation, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*types.MetricsExpectation) *expectations.MetricsExpectation); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expectations.MetricsExpectation)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.MetricsExpectation) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaker_MakeMetricsExpectation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeMetricsExpectation'
type MockMaker_MakeMetricsExpectation_Call struct {
	*mock.Call
}

// MakeMetricsExpectation is a helper method to define mock.On call
//   - config *types.MetricsExpectation
func (_e *MockMaker_Expecter) MakeMetricsExpectation(config interface{}) *MockMaker_MakeMetricsExpectation_Call {
	return &MockMaker_MakeMetricsExpectation_Call{Call: _e.mock.On("MakeMetricsExpectation", config)}
}

func (_c *MockMaker_MakeMetricsExpectation_Call) Run(run func(config *types.MetricsExpectation)) *MockMaker_MakeMetricsExpectation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.MetricsExpectation))
	})
	return _c
}

func (_c *MockMaker_MakeMetricsExpectation_Call) Return(_a0 *expectations.MetricsExpectation, _a1 error) *MockMaker_MakeMetricsExpectation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaker_MakeMetricsExpectation_Call) RunAndReturn(run func(*types.MetricsExpectation) (*expectations.MetricsExpectation, error)) *MockMaker_MakeMetricsExpectation_Call {
	_c.Call.Return(run)
	return _c
}

// MakeOutputExpectation provides a mock function with given fields: config
func (_m *MockMaker) MakeOutputExpectation(config *types.OutputExpectation) (*expectations.OutputExpectation, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for MakeOutputExpectation")
	}

	var r0 *expectations.OutputExpectation
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.OutputExpectation) (*expectations.OutputExpectation, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*types.OutputExpectation) *expectations.OutputExpectation); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expectations.OutputExpectation)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.OutputExpectation) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaker_MakeOutputExpectation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeOutputExpectation'
type MockMaker_MakeOutputExpectation_Call struct {
	*mock.Call
}

// MakeOutputExpectation is a helper method to define mock.On call
//   - config *types.OutputExpectation
func (_e *MockMaker_Expecter) MakeOutputExpectation(config interface{}) *MockMaker_MakeOutputExpectation_Call {
	return &MockMaker_MakeOutputExpectation_Call{Call: _e.mock.On("MakeOutputExpectation", config)}
}

func (_c *MockMaker_MakeOutputExpectation_Call) Run(run func(config *types.OutputExpectation)) *MockMaker_MakeOutputExpectation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.OutputExpectation))
	})
	return _c
}

func (_c *MockMaker_MakeOutputExpectation_Call) Return(_a0 *expectations.OutputExpectation, _a1 error) *MockMaker_MakeOutputExpectation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaker_MakeOutputExpectation_Call) RunAndReturn(run func(*types.OutputExpectation) (*expectations.OutputExpectation, error)) *MockMaker_MakeOutputExpectation_Call {
	_c.Call.Return(run)
	return _c
}

// MakeResponseExpectation provides a mock function with given fields: config
func (_m *MockMaker) MakeResponseExpectation(config *types.ResponseExpectation) (*expectations.ResponseExpectation, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for MakeResponseExpectation")
	}

	var r0 *expectations.ResponseExpectation
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.ResponseExpectation) (*expectations.ResponseExpectation, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*types.ResponseExpectation) *expectations.ResponseExpectation); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expectations.ResponseExpectation)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.ResponseExpectation) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaker_MakeResponseExpectation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeResponseExpectation'
type MockMaker_MakeResponseExpectation_Call struct {
	*mock.Call
}

// MakeResponseExpectation is a helper method to define mock.On call
//   - config *types.ResponseExpectation
func (_e *MockMaker_Expecter) MakeResponseExpectation(config interface{}) *MockMaker_MakeResponseExpectation_Call {
	return &MockMaker_MakeResponseExpectation_Call{Call: _e.mock.On("MakeResponseExpectation", config)}
}

func (_c *MockMaker_MakeResponseExpectation_Call) Run(run func(config *types.ResponseExpectation)) *MockMaker_MakeResponseExpectation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.ResponseExpectation))
	})
	return _c
}

func (_c *MockMaker_MakeResponseExpectation_Call) Return(_a0 *expectations.ResponseExpectation, _a1 error) *MockMaker_MakeResponseExpectation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaker_MakeResponseExpectation_Call) RunAndReturn(run func(*types.ResponseExpectation) (*expectations.ResponseExpectation, error)) *MockMaker_MakeResponseExpectation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMaker creates a new instance of MockMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaker {
	mock := &MockMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
