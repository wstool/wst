// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package action

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/run/actions/action"
	"github.com/wstool/wst/run/instances/runtime"
)

// NewMockAction creates a new instance of MockAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAction {
	mock := &MockAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAction is an autogenerated mock type for the Action type
type MockAction struct {
	mock.Mock
}

type MockAction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAction) EXPECT() *MockAction_Expecter {
	return &MockAction_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type MockAction
func (_mock *MockAction) Execute(ctx context.Context, runData runtime.Data) (bool, error) {
	ret := _mock.Called(ctx, runData)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtime.Data) (bool, error)); ok {
		return returnFunc(ctx, runData)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, runtime.Data) bool); ok {
		r0 = returnFunc(ctx, runData)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, runtime.Data) error); ok {
		r1 = returnFunc(ctx, runData)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAction_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockAction_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - runData runtime.Data
func (_e *MockAction_Expecter) Execute(ctx interface{}, runData interface{}) *MockAction_Execute_Call {
	return &MockAction_Execute_Call{Call: _e.mock.On("Execute", ctx, runData)}
}

func (_c *MockAction_Execute_Call) Run(run func(ctx context.Context, runData runtime.Data)) *MockAction_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 runtime.Data
		if args[1] != nil {
			arg1 = args[1].(runtime.Data)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAction_Execute_Call) Return(b bool, err error) *MockAction_Execute_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockAction_Execute_Call) RunAndReturn(run func(ctx context.Context, runData runtime.Data) (bool, error)) *MockAction_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// OnFailure provides a mock function for the type MockAction
func (_mock *MockAction) OnFailure() action.OnFailureType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for OnFailure")
	}

	var r0 action.OnFailureType
	if returnFunc, ok := ret.Get(0).(func() action.OnFailureType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(action.OnFailureType)
	}
	return r0
}

// MockAction_OnFailure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnFailure'
type MockAction_OnFailure_Call struct {
	*mock.Call
}

// OnFailure is a helper method to define mock.On call
func (_e *MockAction_Expecter) OnFailure() *MockAction_OnFailure_Call {
	return &MockAction_OnFailure_Call{Call: _e.mock.On("OnFailure")}
}

func (_c *MockAction_OnFailure_Call) Run(run func()) *MockAction_OnFailure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAction_OnFailure_Call) Return(onFailureType action.OnFailureType) *MockAction_OnFailure_Call {
	_c.Call.Return(onFailureType)
	return _c
}

func (_c *MockAction_OnFailure_Call) RunAndReturn(run func() action.OnFailureType) *MockAction_OnFailure_Call {
	_c.Call.Return(run)
	return _c
}

// Timeout provides a mock function for the type MockAction
func (_mock *MockAction) Timeout() time.Duration {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Timeout")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// MockAction_Timeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timeout'
type MockAction_Timeout_Call struct {
	*mock.Call
}

// Timeout is a helper method to define mock.On call
func (_e *MockAction_Expecter) Timeout() *MockAction_Timeout_Call {
	return &MockAction_Timeout_Call{Call: _e.mock.On("Timeout")}
}

func (_c *MockAction_Timeout_Call) Run(run func()) *MockAction_Timeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAction_Timeout_Call) Return(duration time.Duration) *MockAction_Timeout_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *MockAction_Timeout_Call) RunAndReturn(run func() time.Duration) *MockAction_Timeout_Call {
	_c.Call.Return(run)
	return _c
}

// When provides a mock function for the type MockAction
func (_mock *MockAction) When() action.When {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for When")
	}

	var r0 action.When
	if returnFunc, ok := ret.Get(0).(func() action.When); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(action.When)
	}
	return r0
}

// MockAction_When_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'When'
type MockAction_When_Call struct {
	*mock.Call
}

// When is a helper method to define mock.On call
func (_e *MockAction_Expecter) When() *MockAction_When_Call {
	return &MockAction_When_Call{Call: _e.mock.On("When")}
}

func (_c *MockAction_When_Call) Run(run func()) *MockAction_When_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAction_When_Call) Return(when action.When) *MockAction_When_Call {
	_c.Call.Return(when)
	return _c
}

func (_c *MockAction_When_Call) RunAndReturn(run func() action.When) *MockAction_When_Call {
	_c.Call.Return(run)
	return _c
}
