// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package action

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/conf/types"
	"github.com/wstool/wst/run/actions/action"
	"github.com/wstool/wst/run/services"
)

// NewMockMaker creates a new instance of MockMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaker {
	mock := &MockMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMaker is an autogenerated mock type for the Maker type
type MockMaker struct {
	mock.Mock
}

type MockMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaker) EXPECT() *MockMaker_Expecter {
	return &MockMaker_Expecter{mock: &_m.Mock}
}

// MakeAction provides a mock function for the type MockMaker
func (_mock *MockMaker) MakeAction(config types.Action, sl services.ServiceLocator, defaultTimeout int) (action.Action, error) {
	ret := _mock.Called(config, sl, defaultTimeout)

	if len(ret) == 0 {
		panic("no return value specified for MakeAction")
	}

	var r0 action.Action
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(types.Action, services.ServiceLocator, int) (action.Action, error)); ok {
		return returnFunc(config, sl, defaultTimeout)
	}
	if returnFunc, ok := ret.Get(0).(func(types.Action, services.ServiceLocator, int) action.Action); ok {
		r0 = returnFunc(config, sl, defaultTimeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(action.Action)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(types.Action, services.ServiceLocator, int) error); ok {
		r1 = returnFunc(config, sl, defaultTimeout)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMaker_MakeAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeAction'
type MockMaker_MakeAction_Call struct {
	*mock.Call
}

// MakeAction is a helper method to define mock.On call
//   - config types.Action
//   - sl services.ServiceLocator
//   - defaultTimeout int
func (_e *MockMaker_Expecter) MakeAction(config interface{}, sl interface{}, defaultTimeout interface{}) *MockMaker_MakeAction_Call {
	return &MockMaker_MakeAction_Call{Call: _e.mock.On("MakeAction", config, sl, defaultTimeout)}
}

func (_c *MockMaker_MakeAction_Call) Run(run func(config types.Action, sl services.ServiceLocator, defaultTimeout int)) *MockMaker_MakeAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.Action
		if args[0] != nil {
			arg0 = args[0].(types.Action)
		}
		var arg1 services.ServiceLocator
		if args[1] != nil {
			arg1 = args[1].(services.ServiceLocator)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMaker_MakeAction_Call) Return(action1 action.Action, err error) *MockMaker_MakeAction_Call {
	_c.Call.Return(action1, err)
	return _c
}

func (_c *MockMaker_MakeAction_Call) RunAndReturn(run func(config types.Action, sl services.ServiceLocator, defaultTimeout int) (action.Action, error)) *MockMaker_MakeAction_Call {
	_c.Call.Return(run)
	return _c
}
