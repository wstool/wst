// Code generated by mockery v2.40.1. DO NOT EDIT.

package services

import (
	bufio "bufio"
	context "context"

	dir "github.com/wstool/wst/run/sandboxes/dir"

	environment "github.com/wstool/wst/run/environments/environment"

	mock "github.com/stretchr/testify/mock"

	output "github.com/wstool/wst/run/environments/environment/output"

	parameters "github.com/wstool/wst/run/parameters"

	sandbox "github.com/wstool/wst/run/sandboxes/sandbox"

	servers "github.com/wstool/wst/run/servers"

	task "github.com/wstool/wst/run/environments/task"

	template "github.com/wstool/wst/run/services/template"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with given fields:
func (_m *MockService) Address() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type MockService_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *MockService_Expecter) Address() *MockService_Address_Call {
	return &MockService_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *MockService_Address_Call) Run(run func()) *MockService_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Address_Call) Return(_a0 string) *MockService_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Address_Call) RunAndReturn(run func() string) *MockService_Address_Call {
	_c.Call.Return(run)
	return _c
}

// ConfDir provides a mock function with given fields:
func (_m *MockService) ConfDir() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ConfDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfDir'
type MockService_ConfDir_Call struct {
	*mock.Call
}

// ConfDir is a helper method to define mock.On call
func (_e *MockService_Expecter) ConfDir() *MockService_ConfDir_Call {
	return &MockService_ConfDir_Call{Call: _e.mock.On("ConfDir")}
}

func (_c *MockService_ConfDir_Call) Run(run func()) *MockService_ConfDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ConfDir_Call) Return(_a0 string, _a1 error) *MockService_ConfDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ConfDir_Call) RunAndReturn(run func() (string, error)) *MockService_ConfDir_Call {
	_c.Call.Return(run)
	return _c
}

// Dirs provides a mock function with given fields:
func (_m *MockService) Dirs() map[dir.DirType]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dirs")
	}

	var r0 map[dir.DirType]string
	if rf, ok := ret.Get(0).(func() map[dir.DirType]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[dir.DirType]string)
		}
	}

	return r0
}

// MockService_Dirs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dirs'
type MockService_Dirs_Call struct {
	*mock.Call
}

// Dirs is a helper method to define mock.On call
func (_e *MockService_Expecter) Dirs() *MockService_Dirs_Call {
	return &MockService_Dirs_Call{Call: _e.mock.On("Dirs")}
}

func (_c *MockService_Dirs_Call) Run(run func()) *MockService_Dirs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Dirs_Call) Return(_a0 map[dir.DirType]string) *MockService_Dirs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Dirs_Call) RunAndReturn(run func() map[dir.DirType]string) *MockService_Dirs_Call {
	_c.Call.Return(run)
	return _c
}

// Environment provides a mock function with given fields:
func (_m *MockService) Environment() environment.Environment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Environment")
	}

	var r0 environment.Environment
	if rf, ok := ret.Get(0).(func() environment.Environment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(environment.Environment)
		}
	}

	return r0
}

// MockService_Environment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Environment'
type MockService_Environment_Call struct {
	*mock.Call
}

// Environment is a helper method to define mock.On call
func (_e *MockService_Expecter) Environment() *MockService_Environment_Call {
	return &MockService_Environment_Call{Call: _e.mock.On("Environment")}
}

func (_c *MockService_Environment_Call) Run(run func()) *MockService_Environment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Environment_Call) Return(_a0 environment.Environment) *MockService_Environment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Environment_Call) RunAndReturn(run func() environment.Environment) *MockService_Environment_Call {
	_c.Call.Return(run)
	return _c
}

// EnvironmentConfigPaths provides a mock function with given fields:
func (_m *MockService) EnvironmentConfigPaths() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnvironmentConfigPaths")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockService_EnvironmentConfigPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnvironmentConfigPaths'
type MockService_EnvironmentConfigPaths_Call struct {
	*mock.Call
}

// EnvironmentConfigPaths is a helper method to define mock.On call
func (_e *MockService_Expecter) EnvironmentConfigPaths() *MockService_EnvironmentConfigPaths_Call {
	return &MockService_EnvironmentConfigPaths_Call{Call: _e.mock.On("EnvironmentConfigPaths")}
}

func (_c *MockService_EnvironmentConfigPaths_Call) Run(run func()) *MockService_EnvironmentConfigPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_EnvironmentConfigPaths_Call) Return(_a0 map[string]string) *MockService_EnvironmentConfigPaths_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_EnvironmentConfigPaths_Call) RunAndReturn(run func() map[string]string) *MockService_EnvironmentConfigPaths_Call {
	_c.Call.Return(run)
	return _c
}

// EnvironmentScriptPaths provides a mock function with given fields:
func (_m *MockService) EnvironmentScriptPaths() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnvironmentScriptPaths")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockService_EnvironmentScriptPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnvironmentScriptPaths'
type MockService_EnvironmentScriptPaths_Call struct {
	*mock.Call
}

// EnvironmentScriptPaths is a helper method to define mock.On call
func (_e *MockService_Expecter) EnvironmentScriptPaths() *MockService_EnvironmentScriptPaths_Call {
	return &MockService_EnvironmentScriptPaths_Call{Call: _e.mock.On("EnvironmentScriptPaths")}
}

func (_c *MockService_EnvironmentScriptPaths_Call) Run(run func()) *MockService_EnvironmentScriptPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_EnvironmentScriptPaths_Call) Return(_a0 map[string]string) *MockService_EnvironmentScriptPaths_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_EnvironmentScriptPaths_Call) RunAndReturn(run func() map[string]string) *MockService_EnvironmentScriptPaths_Call {
	_c.Call.Return(run)
	return _c
}

// Executable provides a mock function with given fields:
func (_m *MockService) Executable() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Executable")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Executable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Executable'
type MockService_Executable_Call struct {
	*mock.Call
}

// Executable is a helper method to define mock.On call
func (_e *MockService_Expecter) Executable() *MockService_Executable_Call {
	return &MockService_Executable_Call{Call: _e.mock.On("Executable")}
}

func (_c *MockService_Executable_Call) Run(run func()) *MockService_Executable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Executable_Call) Return(_a0 string, _a1 error) *MockService_Executable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Executable_Call) RunAndReturn(run func() (string, error)) *MockService_Executable_Call {
	_c.Call.Return(run)
	return _c
}

// FullName provides a mock function with given fields:
func (_m *MockService) FullName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FullName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_FullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FullName'
type MockService_FullName_Call struct {
	*mock.Call
}

// FullName is a helper method to define mock.On call
func (_e *MockService_Expecter) FullName() *MockService_FullName_Call {
	return &MockService_FullName_Call{Call: _e.mock.On("FullName")}
}

func (_c *MockService_FullName_Call) Run(run func()) *MockService_FullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_FullName_Call) Return(_a0 string) *MockService_FullName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_FullName_Call) RunAndReturn(run func() string) *MockService_FullName_Call {
	_c.Call.Return(run)
	return _c
}

// Group provides a mock function with given fields:
func (_m *MockService) Group() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type MockService_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
func (_e *MockService_Expecter) Group() *MockService_Group_Call {
	return &MockService_Group_Call{Call: _e.mock.On("Group")}
}

func (_c *MockService_Group_Call) Run(run func()) *MockService_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Group_Call) Return(_a0 string) *MockService_Group_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Group_Call) RunAndReturn(run func() string) *MockService_Group_Call {
	_c.Call.Return(run)
	return _c
}

// IsPublic provides a mock function with given fields:
func (_m *MockService) IsPublic() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPublic")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockService_IsPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPublic'
type MockService_IsPublic_Call struct {
	*mock.Call
}

// IsPublic is a helper method to define mock.On call
func (_e *MockService_Expecter) IsPublic() *MockService_IsPublic_Call {
	return &MockService_IsPublic_Call{Call: _e.mock.On("IsPublic")}
}

func (_c *MockService_IsPublic_Call) Run(run func()) *MockService_IsPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_IsPublic_Call) Return(_a0 bool) *MockService_IsPublic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_IsPublic_Call) RunAndReturn(run func() bool) *MockService_IsPublic_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockService_Expecter) Name() *MockService_Name_Call {
	return &MockService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockService_Name_Call) Run(run func()) *MockService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Name_Call) Return(_a0 string) *MockService_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Name_Call) RunAndReturn(run func() string) *MockService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OutputScanner provides a mock function with given fields: ctx, outputType
func (_m *MockService) OutputScanner(ctx context.Context, outputType output.Type) (*bufio.Scanner, error) {
	ret := _m.Called(ctx, outputType)

	if len(ret) == 0 {
		panic("no return value specified for OutputScanner")
	}

	var r0 *bufio.Scanner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, output.Type) (*bufio.Scanner, error)); ok {
		return rf(ctx, outputType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, output.Type) *bufio.Scanner); ok {
		r0 = rf(ctx, outputType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bufio.Scanner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, output.Type) error); ok {
		r1 = rf(ctx, outputType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_OutputScanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OutputScanner'
type MockService_OutputScanner_Call struct {
	*mock.Call
}

// OutputScanner is a helper method to define mock.On call
//   - ctx context.Context
//   - outputType output.Type
func (_e *MockService_Expecter) OutputScanner(ctx interface{}, outputType interface{}) *MockService_OutputScanner_Call {
	return &MockService_OutputScanner_Call{Call: _e.mock.On("OutputScanner", ctx, outputType)}
}

func (_c *MockService_OutputScanner_Call) Run(run func(ctx context.Context, outputType output.Type)) *MockService_OutputScanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(output.Type))
	})
	return _c
}

func (_c *MockService_OutputScanner_Call) Return(_a0 *bufio.Scanner, _a1 error) *MockService_OutputScanner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_OutputScanner_Call) RunAndReturn(run func(context.Context, output.Type) (*bufio.Scanner, error)) *MockService_OutputScanner_Call {
	_c.Call.Return(run)
	return _c
}

// Pid provides a mock function with given fields:
func (_m *MockService) Pid() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pid")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Pid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pid'
type MockService_Pid_Call struct {
	*mock.Call
}

// Pid is a helper method to define mock.On call
func (_e *MockService_Expecter) Pid() *MockService_Pid_Call {
	return &MockService_Pid_Call{Call: _e.mock.On("Pid")}
}

func (_c *MockService_Pid_Call) Run(run func()) *MockService_Pid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Pid_Call) Return(_a0 int, _a1 error) *MockService_Pid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Pid_Call) RunAndReturn(run func() (int, error)) *MockService_Pid_Call {
	_c.Call.Return(run)
	return _c
}

// Port provides a mock function with given fields:
func (_m *MockService) Port() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Port")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// MockService_Port_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Port'
type MockService_Port_Call struct {
	*mock.Call
}

// Port is a helper method to define mock.On call
func (_e *MockService_Expecter) Port() *MockService_Port_Call {
	return &MockService_Port_Call{Call: _e.mock.On("Port")}
}

func (_c *MockService_Port_Call) Run(run func()) *MockService_Port_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Port_Call) Return(_a0 int32) *MockService_Port_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Port_Call) RunAndReturn(run func() int32) *MockService_Port_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateUrl provides a mock function with given fields:
func (_m *MockService) PrivateUrl() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrivateUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_PrivateUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateUrl'
type MockService_PrivateUrl_Call struct {
	*mock.Call
}

// PrivateUrl is a helper method to define mock.On call
func (_e *MockService_Expecter) PrivateUrl() *MockService_PrivateUrl_Call {
	return &MockService_PrivateUrl_Call{Call: _e.mock.On("PrivateUrl")}
}

func (_c *MockService_PrivateUrl_Call) Run(run func()) *MockService_PrivateUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_PrivateUrl_Call) Return(_a0 string, _a1 error) *MockService_PrivateUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_PrivateUrl_Call) RunAndReturn(run func() (string, error)) *MockService_PrivateUrl_Call {
	_c.Call.Return(run)
	return _c
}

// PublicUrl provides a mock function with given fields: path
func (_m *MockService) PublicUrl(path string) (string, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for PublicUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_PublicUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicUrl'
type MockService_PublicUrl_Call struct {
	*mock.Call
}

// PublicUrl is a helper method to define mock.On call
//   - path string
func (_e *MockService_Expecter) PublicUrl(path interface{}) *MockService_PublicUrl_Call {
	return &MockService_PublicUrl_Call{Call: _e.mock.On("PublicUrl", path)}
}

func (_c *MockService_PublicUrl_Call) Run(run func(path string)) *MockService_PublicUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_PublicUrl_Call) Return(_a0 string, _a1 error) *MockService_PublicUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_PublicUrl_Call) RunAndReturn(run func(string) (string, error)) *MockService_PublicUrl_Call {
	_c.Call.Return(run)
	return _c
}

// Reload provides a mock function with given fields: ctx
func (_m *MockService) Reload(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Reload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reload'
type MockService_Reload_Call struct {
	*mock.Call
}

// Reload is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Reload(ctx interface{}) *MockService_Reload_Call {
	return &MockService_Reload_Call{Call: _e.mock.On("Reload", ctx)}
}

func (_c *MockService_Reload_Call) Run(run func(ctx context.Context)) *MockService_Reload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Reload_Call) Return(_a0 error) *MockService_Reload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Reload_Call) RunAndReturn(run func(context.Context) error) *MockService_Reload_Call {
	_c.Call.Return(run)
	return _c
}

// RenderTemplate provides a mock function with given fields: text, params
func (_m *MockService) RenderTemplate(text string, params parameters.Parameters) (string, error) {
	ret := _m.Called(text, params)

	if len(ret) == 0 {
		panic("no return value specified for RenderTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, parameters.Parameters) (string, error)); ok {
		return rf(text, params)
	}
	if rf, ok := ret.Get(0).(func(string, parameters.Parameters) string); ok {
		r0 = rf(text, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, parameters.Parameters) error); ok {
		r1 = rf(text, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_RenderTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderTemplate'
type MockService_RenderTemplate_Call struct {
	*mock.Call
}

// RenderTemplate is a helper method to define mock.On call
//   - text string
//   - params parameters.Parameters
func (_e *MockService_Expecter) RenderTemplate(text interface{}, params interface{}) *MockService_RenderTemplate_Call {
	return &MockService_RenderTemplate_Call{Call: _e.mock.On("RenderTemplate", text, params)}
}

func (_c *MockService_RenderTemplate_Call) Run(run func(text string, params parameters.Parameters)) *MockService_RenderTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(parameters.Parameters))
	})
	return _c
}

func (_c *MockService_RenderTemplate_Call) Return(_a0 string, _a1 error) *MockService_RenderTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_RenderTemplate_Call) RunAndReturn(run func(string, parameters.Parameters) (string, error)) *MockService_RenderTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// Restart provides a mock function with given fields: ctx
func (_m *MockService) Restart(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Restart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Restart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restart'
type MockService_Restart_Call struct {
	*mock.Call
}

// Restart is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Restart(ctx interface{}) *MockService_Restart_Call {
	return &MockService_Restart_Call{Call: _e.mock.On("Restart", ctx)}
}

func (_c *MockService_Restart_Call) Run(run func(ctx context.Context)) *MockService_Restart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Restart_Call) Return(_a0 error) *MockService_Restart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Restart_Call) RunAndReturn(run func(context.Context) error) *MockService_Restart_Call {
	_c.Call.Return(run)
	return _c
}

// RunDir provides a mock function with given fields:
func (_m *MockService) RunDir() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RunDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_RunDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunDir'
type MockService_RunDir_Call struct {
	*mock.Call
}

// RunDir is a helper method to define mock.On call
func (_e *MockService_Expecter) RunDir() *MockService_RunDir_Call {
	return &MockService_RunDir_Call{Call: _e.mock.On("RunDir")}
}

func (_c *MockService_RunDir_Call) Run(run func()) *MockService_RunDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_RunDir_Call) Return(_a0 string, _a1 error) *MockService_RunDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_RunDir_Call) RunAndReturn(run func() (string, error)) *MockService_RunDir_Call {
	_c.Call.Return(run)
	return _c
}

// Sandbox provides a mock function with given fields:
func (_m *MockService) Sandbox() sandbox.Sandbox {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sandbox")
	}

	var r0 sandbox.Sandbox
	if rf, ok := ret.Get(0).(func() sandbox.Sandbox); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sandbox.Sandbox)
		}
	}

	return r0
}

// MockService_Sandbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sandbox'
type MockService_Sandbox_Call struct {
	*mock.Call
}

// Sandbox is a helper method to define mock.On call
func (_e *MockService_Expecter) Sandbox() *MockService_Sandbox_Call {
	return &MockService_Sandbox_Call{Call: _e.mock.On("Sandbox")}
}

func (_c *MockService_Sandbox_Call) Run(run func()) *MockService_Sandbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Sandbox_Call) Return(_a0 sandbox.Sandbox) *MockService_Sandbox_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Sandbox_Call) RunAndReturn(run func() sandbox.Sandbox) *MockService_Sandbox_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptDir provides a mock function with given fields:
func (_m *MockService) ScriptDir() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ScriptDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ScriptDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptDir'
type MockService_ScriptDir_Call struct {
	*mock.Call
}

// ScriptDir is a helper method to define mock.On call
func (_e *MockService_Expecter) ScriptDir() *MockService_ScriptDir_Call {
	return &MockService_ScriptDir_Call{Call: _e.mock.On("ScriptDir")}
}

func (_c *MockService_ScriptDir_Call) Run(run func()) *MockService_ScriptDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ScriptDir_Call) Return(_a0 string, _a1 error) *MockService_ScriptDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ScriptDir_Call) RunAndReturn(run func() (string, error)) *MockService_ScriptDir_Call {
	_c.Call.Return(run)
	return _c
}

// Server provides a mock function with given fields:
func (_m *MockService) Server() servers.Server {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Server")
	}

	var r0 servers.Server
	if rf, ok := ret.Get(0).(func() servers.Server); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(servers.Server)
		}
	}

	return r0
}

// MockService_Server_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Server'
type MockService_Server_Call struct {
	*mock.Call
}

// Server is a helper method to define mock.On call
func (_e *MockService_Expecter) Server() *MockService_Server_Call {
	return &MockService_Server_Call{Call: _e.mock.On("Server")}
}

func (_c *MockService_Server_Call) Run(run func()) *MockService_Server_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Server_Call) Return(_a0 servers.Server) *MockService_Server_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Server_Call) RunAndReturn(run func() servers.Server) *MockService_Server_Call {
	_c.Call.Return(run)
	return _c
}

// ServerParameters provides a mock function with given fields:
func (_m *MockService) ServerParameters() parameters.Parameters {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerParameters")
	}

	var r0 parameters.Parameters
	if rf, ok := ret.Get(0).(func() parameters.Parameters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(parameters.Parameters)
		}
	}

	return r0
}

// MockService_ServerParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerParameters'
type MockService_ServerParameters_Call struct {
	*mock.Call
}

// ServerParameters is a helper method to define mock.On call
func (_e *MockService_Expecter) ServerParameters() *MockService_ServerParameters_Call {
	return &MockService_ServerParameters_Call{Call: _e.mock.On("ServerParameters")}
}

func (_c *MockService_ServerParameters_Call) Run(run func()) *MockService_ServerParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ServerParameters_Call) Return(_a0 parameters.Parameters) *MockService_ServerParameters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ServerParameters_Call) RunAndReturn(run func() parameters.Parameters) *MockService_ServerParameters_Call {
	_c.Call.Return(run)
	return _c
}

// SetTemplate provides a mock function with given fields: _a0
func (_m *MockService) SetTemplate(_a0 template.Template) {
	_m.Called(_a0)
}

// MockService_SetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTemplate'
type MockService_SetTemplate_Call struct {
	*mock.Call
}

// SetTemplate is a helper method to define mock.On call
//   - _a0 template.Template
func (_e *MockService_Expecter) SetTemplate(_a0 interface{}) *MockService_SetTemplate_Call {
	return &MockService_SetTemplate_Call{Call: _e.mock.On("SetTemplate", _a0)}
}

func (_c *MockService_SetTemplate_Call) Run(run func(_a0 template.Template)) *MockService_SetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(template.Template))
	})
	return _c
}

func (_c *MockService_SetTemplate_Call) Return() *MockService_SetTemplate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockService_SetTemplate_Call) RunAndReturn(run func(template.Template)) *MockService_SetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockService) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Start(ctx interface{}) *MockService_Start_Call {
	return &MockService_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockService_Start_Call) Run(run func(ctx context.Context)) *MockService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Start_Call) Return(_a0 error) *MockService_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Start_Call) RunAndReturn(run func(context.Context) error) *MockService_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *MockService) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockService_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Stop(ctx interface{}) *MockService_Stop_Call {
	return &MockService_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockService_Stop_Call) Run(run func(ctx context.Context)) *MockService_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Stop_Call) Return(_a0 error) *MockService_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Stop_Call) RunAndReturn(run func(context.Context) error) *MockService_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Task provides a mock function with given fields:
func (_m *MockService) Task() task.Task {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Task")
	}

	var r0 task.Task
	if rf, ok := ret.Get(0).(func() task.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Task)
		}
	}

	return r0
}

// MockService_Task_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Task'
type MockService_Task_Call struct {
	*mock.Call
}

// Task is a helper method to define mock.On call
func (_e *MockService_Expecter) Task() *MockService_Task_Call {
	return &MockService_Task_Call{Call: _e.mock.On("Task")}
}

func (_c *MockService_Task_Call) Run(run func()) *MockService_Task_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Task_Call) Return(_a0 task.Task) *MockService_Task_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Task_Call) RunAndReturn(run func() task.Task) *MockService_Task_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function with given fields:
func (_m *MockService) User() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type MockService_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
func (_e *MockService_Expecter) User() *MockService_User_Call {
	return &MockService_User_Call{Call: _e.mock.On("User")}
}

func (_c *MockService_User_Call) Run(run func()) *MockService_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_User_Call) Return(_a0 string) *MockService_User_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_User_Call) RunAndReturn(run func() string) *MockService_User_Call {
	_c.Call.Return(run)
	return _c
}

// Workspace provides a mock function with given fields:
func (_m *MockService) Workspace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Workspace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Workspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Workspace'
type MockService_Workspace_Call struct {
	*mock.Call
}

// Workspace is a helper method to define mock.On call
func (_e *MockService_Expecter) Workspace() *MockService_Workspace_Call {
	return &MockService_Workspace_Call{Call: _e.mock.On("Workspace")}
}

func (_c *MockService_Workspace_Call) Run(run func()) *MockService_Workspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Workspace_Call) Return(_a0 string) *MockService_Workspace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Workspace_Call) RunAndReturn(run func() string) *MockService_Workspace_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspaceConfigPaths provides a mock function with given fields:
func (_m *MockService) WorkspaceConfigPaths() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WorkspaceConfigPaths")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockService_WorkspaceConfigPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspaceConfigPaths'
type MockService_WorkspaceConfigPaths_Call struct {
	*mock.Call
}

// WorkspaceConfigPaths is a helper method to define mock.On call
func (_e *MockService_Expecter) WorkspaceConfigPaths() *MockService_WorkspaceConfigPaths_Call {
	return &MockService_WorkspaceConfigPaths_Call{Call: _e.mock.On("WorkspaceConfigPaths")}
}

func (_c *MockService_WorkspaceConfigPaths_Call) Run(run func()) *MockService_WorkspaceConfigPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_WorkspaceConfigPaths_Call) Return(_a0 map[string]string) *MockService_WorkspaceConfigPaths_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_WorkspaceConfigPaths_Call) RunAndReturn(run func() map[string]string) *MockService_WorkspaceConfigPaths_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspaceScriptPaths provides a mock function with given fields:
func (_m *MockService) WorkspaceScriptPaths() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WorkspaceScriptPaths")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockService_WorkspaceScriptPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspaceScriptPaths'
type MockService_WorkspaceScriptPaths_Call struct {
	*mock.Call
}

// WorkspaceScriptPaths is a helper method to define mock.On call
func (_e *MockService_Expecter) WorkspaceScriptPaths() *MockService_WorkspaceScriptPaths_Call {
	return &MockService_WorkspaceScriptPaths_Call{Call: _e.mock.On("WorkspaceScriptPaths")}
}

func (_c *MockService_WorkspaceScriptPaths_Call) Run(run func()) *MockService_WorkspaceScriptPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_WorkspaceScriptPaths_Call) Return(_a0 map[string]string) *MockService_WorkspaceScriptPaths_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_WorkspaceScriptPaths_Call) RunAndReturn(run func() map[string]string) *MockService_WorkspaceScriptPaths_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
