// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package services

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/run/environments/environment"
	"github.com/wstool/wst/run/environments/environment/output"
	"github.com/wstool/wst/run/environments/task"
	"github.com/wstool/wst/run/parameters"
	"github.com/wstool/wst/run/resources/certificates"
	"github.com/wstool/wst/run/sandboxes/dir"
	"github.com/wstool/wst/run/sandboxes/sandbox"
	"github.com/wstool/wst/run/servers"
	"github.com/wstool/wst/run/services/template"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// ConfDir provides a mock function for the type MockService
func (_mock *MockService) ConfDir() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfDir")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ConfDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfDir'
type MockService_ConfDir_Call struct {
	*mock.Call
}

// ConfDir is a helper method to define mock.On call
func (_e *MockService_Expecter) ConfDir() *MockService_ConfDir_Call {
	return &MockService_ConfDir_Call{Call: _e.mock.On("ConfDir")}
}

func (_c *MockService_ConfDir_Call) Run(run func()) *MockService_ConfDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ConfDir_Call) Return(s string, err error) *MockService_ConfDir_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_ConfDir_Call) RunAndReturn(run func() (string, error)) *MockService_ConfDir_Call {
	_c.Call.Return(run)
	return _c
}

// Dirs provides a mock function for the type MockService
func (_mock *MockService) Dirs() map[dir.DirType]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dirs")
	}

	var r0 map[dir.DirType]string
	if returnFunc, ok := ret.Get(0).(func() map[dir.DirType]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[dir.DirType]string)
		}
	}
	return r0
}

// MockService_Dirs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dirs'
type MockService_Dirs_Call struct {
	*mock.Call
}

// Dirs is a helper method to define mock.On call
func (_e *MockService_Expecter) Dirs() *MockService_Dirs_Call {
	return &MockService_Dirs_Call{Call: _e.mock.On("Dirs")}
}

func (_c *MockService_Dirs_Call) Run(run func()) *MockService_Dirs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Dirs_Call) Return(dirTypeToString map[dir.DirType]string) *MockService_Dirs_Call {
	_c.Call.Return(dirTypeToString)
	return _c
}

func (_c *MockService_Dirs_Call) RunAndReturn(run func() map[dir.DirType]string) *MockService_Dirs_Call {
	_c.Call.Return(run)
	return _c
}

// Environment provides a mock function for the type MockService
func (_mock *MockService) Environment() environment.Environment {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Environment")
	}

	var r0 environment.Environment
	if returnFunc, ok := ret.Get(0).(func() environment.Environment); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(environment.Environment)
		}
	}
	return r0
}

// MockService_Environment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Environment'
type MockService_Environment_Call struct {
	*mock.Call
}

// Environment is a helper method to define mock.On call
func (_e *MockService_Expecter) Environment() *MockService_Environment_Call {
	return &MockService_Environment_Call{Call: _e.mock.On("Environment")}
}

func (_c *MockService_Environment_Call) Run(run func()) *MockService_Environment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Environment_Call) Return(environment1 environment.Environment) *MockService_Environment_Call {
	_c.Call.Return(environment1)
	return _c
}

func (_c *MockService_Environment_Call) RunAndReturn(run func() environment.Environment) *MockService_Environment_Call {
	_c.Call.Return(run)
	return _c
}

// EnvironmentConfigPaths provides a mock function for the type MockService
func (_mock *MockService) EnvironmentConfigPaths() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnvironmentConfigPaths")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockService_EnvironmentConfigPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnvironmentConfigPaths'
type MockService_EnvironmentConfigPaths_Call struct {
	*mock.Call
}

// EnvironmentConfigPaths is a helper method to define mock.On call
func (_e *MockService_Expecter) EnvironmentConfigPaths() *MockService_EnvironmentConfigPaths_Call {
	return &MockService_EnvironmentConfigPaths_Call{Call: _e.mock.On("EnvironmentConfigPaths")}
}

func (_c *MockService_EnvironmentConfigPaths_Call) Run(run func()) *MockService_EnvironmentConfigPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_EnvironmentConfigPaths_Call) Return(stringToString map[string]string) *MockService_EnvironmentConfigPaths_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockService_EnvironmentConfigPaths_Call) RunAndReturn(run func() map[string]string) *MockService_EnvironmentConfigPaths_Call {
	_c.Call.Return(run)
	return _c
}

// EnvironmentScriptPaths provides a mock function for the type MockService
func (_mock *MockService) EnvironmentScriptPaths() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnvironmentScriptPaths")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockService_EnvironmentScriptPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnvironmentScriptPaths'
type MockService_EnvironmentScriptPaths_Call struct {
	*mock.Call
}

// EnvironmentScriptPaths is a helper method to define mock.On call
func (_e *MockService_Expecter) EnvironmentScriptPaths() *MockService_EnvironmentScriptPaths_Call {
	return &MockService_EnvironmentScriptPaths_Call{Call: _e.mock.On("EnvironmentScriptPaths")}
}

func (_c *MockService_EnvironmentScriptPaths_Call) Run(run func()) *MockService_EnvironmentScriptPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_EnvironmentScriptPaths_Call) Return(stringToString map[string]string) *MockService_EnvironmentScriptPaths_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockService_EnvironmentScriptPaths_Call) RunAndReturn(run func() map[string]string) *MockService_EnvironmentScriptPaths_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCommand provides a mock function for the type MockService
func (_mock *MockService) ExecCommand(ctx context.Context, cmd *environment.Command, oc output.Collector) error {
	ret := _mock.Called(ctx, cmd, oc)

	if len(ret) == 0 {
		panic("no return value specified for ExecCommand")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *environment.Command, output.Collector) error); ok {
		r0 = returnFunc(ctx, cmd, oc)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_ExecCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommand'
type MockService_ExecCommand_Call struct {
	*mock.Call
}

// ExecCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd *environment.Command
//   - oc output.Collector
func (_e *MockService_Expecter) ExecCommand(ctx interface{}, cmd interface{}, oc interface{}) *MockService_ExecCommand_Call {
	return &MockService_ExecCommand_Call{Call: _e.mock.On("ExecCommand", ctx, cmd, oc)}
}

func (_c *MockService_ExecCommand_Call) Run(run func(ctx context.Context, cmd *environment.Command, oc output.Collector)) *MockService_ExecCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *environment.Command
		if args[1] != nil {
			arg1 = args[1].(*environment.Command)
		}
		var arg2 output.Collector
		if args[2] != nil {
			arg2 = args[2].(output.Collector)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockService_ExecCommand_Call) Return(err error) *MockService_ExecCommand_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_ExecCommand_Call) RunAndReturn(run func(ctx context.Context, cmd *environment.Command, oc output.Collector) error) *MockService_ExecCommand_Call {
	_c.Call.Return(run)
	return _c
}

// Executable provides a mock function for the type MockService
func (_mock *MockService) Executable() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Executable")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_Executable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Executable'
type MockService_Executable_Call struct {
	*mock.Call
}

// Executable is a helper method to define mock.On call
func (_e *MockService_Expecter) Executable() *MockService_Executable_Call {
	return &MockService_Executable_Call{Call: _e.mock.On("Executable")}
}

func (_c *MockService_Executable_Call) Run(run func()) *MockService_Executable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Executable_Call) Return(s string, err error) *MockService_Executable_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_Executable_Call) RunAndReturn(run func() (string, error)) *MockService_Executable_Call {
	_c.Call.Return(run)
	return _c
}

// FindCertificate provides a mock function for the type MockService
func (_mock *MockService) FindCertificate(name string) (*certificates.RenderedCertificate, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FindCertificate")
	}

	var r0 *certificates.RenderedCertificate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*certificates.RenderedCertificate, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *certificates.RenderedCertificate); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificates.RenderedCertificate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_FindCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCertificate'
type MockService_FindCertificate_Call struct {
	*mock.Call
}

// FindCertificate is a helper method to define mock.On call
//   - name string
func (_e *MockService_Expecter) FindCertificate(name interface{}) *MockService_FindCertificate_Call {
	return &MockService_FindCertificate_Call{Call: _e.mock.On("FindCertificate", name)}
}

func (_c *MockService_FindCertificate_Call) Run(run func(name string)) *MockService_FindCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_FindCertificate_Call) Return(renderedCertificate *certificates.RenderedCertificate, err error) *MockService_FindCertificate_Call {
	_c.Call.Return(renderedCertificate, err)
	return _c
}

func (_c *MockService_FindCertificate_Call) RunAndReturn(run func(name string) (*certificates.RenderedCertificate, error)) *MockService_FindCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// FullName provides a mock function for the type MockService
func (_mock *MockService) FullName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FullName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockService_FullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FullName'
type MockService_FullName_Call struct {
	*mock.Call
}

// FullName is a helper method to define mock.On call
func (_e *MockService_Expecter) FullName() *MockService_FullName_Call {
	return &MockService_FullName_Call{Call: _e.mock.On("FullName")}
}

func (_c *MockService_FullName_Call) Run(run func()) *MockService_FullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_FullName_Call) Return(s string) *MockService_FullName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockService_FullName_Call) RunAndReturn(run func() string) *MockService_FullName_Call {
	_c.Call.Return(run)
	return _c
}

// Group provides a mock function for the type MockService
func (_mock *MockService) Group() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockService_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type MockService_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
func (_e *MockService_Expecter) Group() *MockService_Group_Call {
	return &MockService_Group_Call{Call: _e.mock.On("Group")}
}

func (_c *MockService_Group_Call) Run(run func()) *MockService_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Group_Call) Return(s string) *MockService_Group_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockService_Group_Call) RunAndReturn(run func() string) *MockService_Group_Call {
	_c.Call.Return(run)
	return _c
}

// IsPublic provides a mock function for the type MockService
func (_mock *MockService) IsPublic() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPublic")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockService_IsPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPublic'
type MockService_IsPublic_Call struct {
	*mock.Call
}

// IsPublic is a helper method to define mock.On call
func (_e *MockService_Expecter) IsPublic() *MockService_IsPublic_Call {
	return &MockService_IsPublic_Call{Call: _e.mock.On("IsPublic")}
}

func (_c *MockService_IsPublic_Call) Run(run func()) *MockService_IsPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_IsPublic_Call) Return(b bool) *MockService_IsPublic_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockService_IsPublic_Call) RunAndReturn(run func() bool) *MockService_IsPublic_Call {
	_c.Call.Return(run)
	return _c
}

// LocalAddress provides a mock function for the type MockService
func (_mock *MockService) LocalAddress() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalAddress")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockService_LocalAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalAddress'
type MockService_LocalAddress_Call struct {
	*mock.Call
}

// LocalAddress is a helper method to define mock.On call
func (_e *MockService_Expecter) LocalAddress() *MockService_LocalAddress_Call {
	return &MockService_LocalAddress_Call{Call: _e.mock.On("LocalAddress")}
}

func (_c *MockService_LocalAddress_Call) Run(run func()) *MockService_LocalAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_LocalAddress_Call) Return(s string) *MockService_LocalAddress_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockService_LocalAddress_Call) RunAndReturn(run func() string) *MockService_LocalAddress_Call {
	_c.Call.Return(run)
	return _c
}

// LocalPort provides a mock function for the type MockService
func (_mock *MockService) LocalPort() int32 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalPort")
	}

	var r0 int32
	if returnFunc, ok := ret.Get(0).(func() int32); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int32)
	}
	return r0
}

// MockService_LocalPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalPort'
type MockService_LocalPort_Call struct {
	*mock.Call
}

// LocalPort is a helper method to define mock.On call
func (_e *MockService_Expecter) LocalPort() *MockService_LocalPort_Call {
	return &MockService_LocalPort_Call{Call: _e.mock.On("LocalPort")}
}

func (_c *MockService_LocalPort_Call) Run(run func()) *MockService_LocalPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_LocalPort_Call) Return(n int32) *MockService_LocalPort_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockService_LocalPort_Call) RunAndReturn(run func() int32) *MockService_LocalPort_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockService
func (_mock *MockService) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockService_Expecter) Name() *MockService_Name_Call {
	return &MockService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockService_Name_Call) Run(run func()) *MockService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Name_Call) Return(s string) *MockService_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockService_Name_Call) RunAndReturn(run func() string) *MockService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OutputReader provides a mock function for the type MockService
func (_mock *MockService) OutputReader(ctx context.Context, outputType output.Type) (io.Reader, error) {
	ret := _mock.Called(ctx, outputType)

	if len(ret) == 0 {
		panic("no return value specified for OutputReader")
	}

	var r0 io.Reader
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, output.Type) (io.Reader, error)); ok {
		return returnFunc(ctx, outputType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, output.Type) io.Reader); ok {
		r0 = returnFunc(ctx, outputType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, output.Type) error); ok {
		r1 = returnFunc(ctx, outputType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_OutputReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OutputReader'
type MockService_OutputReader_Call struct {
	*mock.Call
}

// OutputReader is a helper method to define mock.On call
//   - ctx context.Context
//   - outputType output.Type
func (_e *MockService_Expecter) OutputReader(ctx interface{}, outputType interface{}) *MockService_OutputReader_Call {
	return &MockService_OutputReader_Call{Call: _e.mock.On("OutputReader", ctx, outputType)}
}

func (_c *MockService_OutputReader_Call) Run(run func(ctx context.Context, outputType output.Type)) *MockService_OutputReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 output.Type
		if args[1] != nil {
			arg1 = args[1].(output.Type)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_OutputReader_Call) Return(reader io.Reader, err error) *MockService_OutputReader_Call {
	_c.Call.Return(reader, err)
	return _c
}

func (_c *MockService_OutputReader_Call) RunAndReturn(run func(ctx context.Context, outputType output.Type) (io.Reader, error)) *MockService_OutputReader_Call {
	_c.Call.Return(run)
	return _c
}

// Pid provides a mock function for the type MockService
func (_mock *MockService) Pid() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pid")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_Pid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pid'
type MockService_Pid_Call struct {
	*mock.Call
}

// Pid is a helper method to define mock.On call
func (_e *MockService_Expecter) Pid() *MockService_Pid_Call {
	return &MockService_Pid_Call{Call: _e.mock.On("Pid")}
}

func (_c *MockService_Pid_Call) Run(run func()) *MockService_Pid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Pid_Call) Return(n int, err error) *MockService_Pid_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockService_Pid_Call) RunAndReturn(run func() (int, error)) *MockService_Pid_Call {
	_c.Call.Return(run)
	return _c
}

// Port provides a mock function for the type MockService
func (_mock *MockService) Port() int32 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Port")
	}

	var r0 int32
	if returnFunc, ok := ret.Get(0).(func() int32); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int32)
	}
	return r0
}

// MockService_Port_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Port'
type MockService_Port_Call struct {
	*mock.Call
}

// Port is a helper method to define mock.On call
func (_e *MockService_Expecter) Port() *MockService_Port_Call {
	return &MockService_Port_Call{Call: _e.mock.On("Port")}
}

func (_c *MockService_Port_Call) Run(run func()) *MockService_Port_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Port_Call) Return(n int32) *MockService_Port_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockService_Port_Call) RunAndReturn(run func() int32) *MockService_Port_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateAddress provides a mock function for the type MockService
func (_mock *MockService) PrivateAddress() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrivateAddress")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockService_PrivateAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateAddress'
type MockService_PrivateAddress_Call struct {
	*mock.Call
}

// PrivateAddress is a helper method to define mock.On call
func (_e *MockService_Expecter) PrivateAddress() *MockService_PrivateAddress_Call {
	return &MockService_PrivateAddress_Call{Call: _e.mock.On("PrivateAddress")}
}

func (_c *MockService_PrivateAddress_Call) Run(run func()) *MockService_PrivateAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_PrivateAddress_Call) Return(s string) *MockService_PrivateAddress_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockService_PrivateAddress_Call) RunAndReturn(run func() string) *MockService_PrivateAddress_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateUrl provides a mock function for the type MockService
func (_mock *MockService) PrivateUrl(scheme string) (string, error) {
	ret := _mock.Called(scheme)

	if len(ret) == 0 {
		panic("no return value specified for PrivateUrl")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(scheme)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(scheme)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(scheme)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_PrivateUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateUrl'
type MockService_PrivateUrl_Call struct {
	*mock.Call
}

// PrivateUrl is a helper method to define mock.On call
//   - scheme string
func (_e *MockService_Expecter) PrivateUrl(scheme interface{}) *MockService_PrivateUrl_Call {
	return &MockService_PrivateUrl_Call{Call: _e.mock.On("PrivateUrl", scheme)}
}

func (_c *MockService_PrivateUrl_Call) Run(run func(scheme string)) *MockService_PrivateUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_PrivateUrl_Call) Return(s string, err error) *MockService_PrivateUrl_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_PrivateUrl_Call) RunAndReturn(run func(scheme string) (string, error)) *MockService_PrivateUrl_Call {
	_c.Call.Return(run)
	return _c
}

// PublicUrl provides a mock function for the type MockService
func (_mock *MockService) PublicUrl(scheme string, path string) (string, error) {
	ret := _mock.Called(scheme, path)

	if len(ret) == 0 {
		panic("no return value specified for PublicUrl")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(scheme, path)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(scheme, path)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(scheme, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_PublicUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicUrl'
type MockService_PublicUrl_Call struct {
	*mock.Call
}

// PublicUrl is a helper method to define mock.On call
//   - scheme string
//   - path string
func (_e *MockService_Expecter) PublicUrl(scheme interface{}, path interface{}) *MockService_PublicUrl_Call {
	return &MockService_PublicUrl_Call{Call: _e.mock.On("PublicUrl", scheme, path)}
}

func (_c *MockService_PublicUrl_Call) Run(run func(scheme string, path string)) *MockService_PublicUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_PublicUrl_Call) Return(s string, err error) *MockService_PublicUrl_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_PublicUrl_Call) RunAndReturn(run func(scheme string, path string) (string, error)) *MockService_PublicUrl_Call {
	_c.Call.Return(run)
	return _c
}

// Reload provides a mock function for the type MockService
func (_mock *MockService) Reload(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Reload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reload'
type MockService_Reload_Call struct {
	*mock.Call
}

// Reload is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Reload(ctx interface{}) *MockService_Reload_Call {
	return &MockService_Reload_Call{Call: _e.mock.On("Reload", ctx)}
}

func (_c *MockService_Reload_Call) Run(run func(ctx context.Context)) *MockService_Reload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_Reload_Call) Return(err error) *MockService_Reload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Reload_Call) RunAndReturn(run func(ctx context.Context) error) *MockService_Reload_Call {
	_c.Call.Return(run)
	return _c
}

// RenderTemplate provides a mock function for the type MockService
func (_mock *MockService) RenderTemplate(text string, params parameters.Parameters) (string, error) {
	ret := _mock.Called(text, params)

	if len(ret) == 0 {
		panic("no return value specified for RenderTemplate")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, parameters.Parameters) (string, error)); ok {
		return returnFunc(text, params)
	}
	if returnFunc, ok := ret.Get(0).(func(string, parameters.Parameters) string); ok {
		r0 = returnFunc(text, params)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, parameters.Parameters) error); ok {
		r1 = returnFunc(text, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RenderTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderTemplate'
type MockService_RenderTemplate_Call struct {
	*mock.Call
}

// RenderTemplate is a helper method to define mock.On call
//   - text string
//   - params parameters.Parameters
func (_e *MockService_Expecter) RenderTemplate(text interface{}, params interface{}) *MockService_RenderTemplate_Call {
	return &MockService_RenderTemplate_Call{Call: _e.mock.On("RenderTemplate", text, params)}
}

func (_c *MockService_RenderTemplate_Call) Run(run func(text string, params parameters.Parameters)) *MockService_RenderTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 parameters.Parameters
		if args[1] != nil {
			arg1 = args[1].(parameters.Parameters)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_RenderTemplate_Call) Return(s string, err error) *MockService_RenderTemplate_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_RenderTemplate_Call) RunAndReturn(run func(text string, params parameters.Parameters) (string, error)) *MockService_RenderTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// Restart provides a mock function for the type MockService
func (_mock *MockService) Restart(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Restart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Restart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restart'
type MockService_Restart_Call struct {
	*mock.Call
}

// Restart is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Restart(ctx interface{}) *MockService_Restart_Call {
	return &MockService_Restart_Call{Call: _e.mock.On("Restart", ctx)}
}

func (_c *MockService_Restart_Call) Run(run func(ctx context.Context)) *MockService_Restart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_Restart_Call) Return(err error) *MockService_Restart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Restart_Call) RunAndReturn(run func(ctx context.Context) error) *MockService_Restart_Call {
	_c.Call.Return(run)
	return _c
}

// RunDir provides a mock function for the type MockService
func (_mock *MockService) RunDir() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RunDir")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RunDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunDir'
type MockService_RunDir_Call struct {
	*mock.Call
}

// RunDir is a helper method to define mock.On call
func (_e *MockService_Expecter) RunDir() *MockService_RunDir_Call {
	return &MockService_RunDir_Call{Call: _e.mock.On("RunDir")}
}

func (_c *MockService_RunDir_Call) Run(run func()) *MockService_RunDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_RunDir_Call) Return(s string, err error) *MockService_RunDir_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_RunDir_Call) RunAndReturn(run func() (string, error)) *MockService_RunDir_Call {
	_c.Call.Return(run)
	return _c
}

// Sandbox provides a mock function for the type MockService
func (_mock *MockService) Sandbox() sandbox.Sandbox {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sandbox")
	}

	var r0 sandbox.Sandbox
	if returnFunc, ok := ret.Get(0).(func() sandbox.Sandbox); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sandbox.Sandbox)
		}
	}
	return r0
}

// MockService_Sandbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sandbox'
type MockService_Sandbox_Call struct {
	*mock.Call
}

// Sandbox is a helper method to define mock.On call
func (_e *MockService_Expecter) Sandbox() *MockService_Sandbox_Call {
	return &MockService_Sandbox_Call{Call: _e.mock.On("Sandbox")}
}

func (_c *MockService_Sandbox_Call) Run(run func()) *MockService_Sandbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Sandbox_Call) Return(sandbox1 sandbox.Sandbox) *MockService_Sandbox_Call {
	_c.Call.Return(sandbox1)
	return _c
}

func (_c *MockService_Sandbox_Call) RunAndReturn(run func() sandbox.Sandbox) *MockService_Sandbox_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptDir provides a mock function for the type MockService
func (_mock *MockService) ScriptDir() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ScriptDir")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ScriptDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptDir'
type MockService_ScriptDir_Call struct {
	*mock.Call
}

// ScriptDir is a helper method to define mock.On call
func (_e *MockService_Expecter) ScriptDir() *MockService_ScriptDir_Call {
	return &MockService_ScriptDir_Call{Call: _e.mock.On("ScriptDir")}
}

func (_c *MockService_ScriptDir_Call) Run(run func()) *MockService_ScriptDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ScriptDir_Call) Return(s string, err error) *MockService_ScriptDir_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_ScriptDir_Call) RunAndReturn(run func() (string, error)) *MockService_ScriptDir_Call {
	_c.Call.Return(run)
	return _c
}

// Server provides a mock function for the type MockService
func (_mock *MockService) Server() servers.Server {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Server")
	}

	var r0 servers.Server
	if returnFunc, ok := ret.Get(0).(func() servers.Server); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(servers.Server)
		}
	}
	return r0
}

// MockService_Server_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Server'
type MockService_Server_Call struct {
	*mock.Call
}

// Server is a helper method to define mock.On call
func (_e *MockService_Expecter) Server() *MockService_Server_Call {
	return &MockService_Server_Call{Call: _e.mock.On("Server")}
}

func (_c *MockService_Server_Call) Run(run func()) *MockService_Server_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Server_Call) Return(server servers.Server) *MockService_Server_Call {
	_c.Call.Return(server)
	return _c
}

func (_c *MockService_Server_Call) RunAndReturn(run func() servers.Server) *MockService_Server_Call {
	_c.Call.Return(run)
	return _c
}

// ServerParameters provides a mock function for the type MockService
func (_mock *MockService) ServerParameters() parameters.Parameters {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerParameters")
	}

	var r0 parameters.Parameters
	if returnFunc, ok := ret.Get(0).(func() parameters.Parameters); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(parameters.Parameters)
		}
	}
	return r0
}

// MockService_ServerParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerParameters'
type MockService_ServerParameters_Call struct {
	*mock.Call
}

// ServerParameters is a helper method to define mock.On call
func (_e *MockService_Expecter) ServerParameters() *MockService_ServerParameters_Call {
	return &MockService_ServerParameters_Call{Call: _e.mock.On("ServerParameters")}
}

func (_c *MockService_ServerParameters_Call) Run(run func()) *MockService_ServerParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ServerParameters_Call) Return(parameters1 parameters.Parameters) *MockService_ServerParameters_Call {
	_c.Call.Return(parameters1)
	return _c
}

func (_c *MockService_ServerParameters_Call) RunAndReturn(run func() parameters.Parameters) *MockService_ServerParameters_Call {
	_c.Call.Return(run)
	return _c
}

// SetTemplate provides a mock function for the type MockService
func (_mock *MockService) SetTemplate(template1 template.Template) {
	_mock.Called(template1)
	return
}

// MockService_SetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTemplate'
type MockService_SetTemplate_Call struct {
	*mock.Call
}

// SetTemplate is a helper method to define mock.On call
//   - template1 template.Template
func (_e *MockService_Expecter) SetTemplate(template1 interface{}) *MockService_SetTemplate_Call {
	return &MockService_SetTemplate_Call{Call: _e.mock.On("SetTemplate", template1)}
}

func (_c *MockService_SetTemplate_Call) Run(run func(template1 template.Template)) *MockService_SetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 template.Template
		if args[0] != nil {
			arg0 = args[0].(template.Template)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_SetTemplate_Call) Return() *MockService_SetTemplate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockService_SetTemplate_Call) RunAndReturn(run func(template1 template.Template)) *MockService_SetTemplate_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function for the type MockService
func (_mock *MockService) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Start(ctx interface{}) *MockService_Start_Call {
	return &MockService_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockService_Start_Call) Run(run func(ctx context.Context)) *MockService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_Start_Call) Return(err error) *MockService_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockService_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockService
func (_mock *MockService) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockService_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Stop(ctx interface{}) *MockService_Stop_Call {
	return &MockService_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockService_Stop_Call) Run(run func(ctx context.Context)) *MockService_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_Stop_Call) Return(err error) *MockService_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *MockService_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Task provides a mock function for the type MockService
func (_mock *MockService) Task() task.Task {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Task")
	}

	var r0 task.Task
	if returnFunc, ok := ret.Get(0).(func() task.Task); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Task)
		}
	}
	return r0
}

// MockService_Task_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Task'
type MockService_Task_Call struct {
	*mock.Call
}

// Task is a helper method to define mock.On call
func (_e *MockService_Expecter) Task() *MockService_Task_Call {
	return &MockService_Task_Call{Call: _e.mock.On("Task")}
}

func (_c *MockService_Task_Call) Run(run func()) *MockService_Task_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Task_Call) Return(task1 task.Task) *MockService_Task_Call {
	_c.Call.Return(task1)
	return _c
}

func (_c *MockService_Task_Call) RunAndReturn(run func() task.Task) *MockService_Task_Call {
	_c.Call.Return(run)
	return _c
}

// UdsPath provides a mock function for the type MockService
func (_mock *MockService) UdsPath(strings ...string) (string, error) {
	// string
	_va := make([]interface{}, len(strings))
	for _i := range strings {
		_va[_i] = strings[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UdsPath")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(...string) (string, error)); ok {
		return returnFunc(strings...)
	}
	if returnFunc, ok := ret.Get(0).(func(...string) string); ok {
		r0 = returnFunc(strings...)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(...string) error); ok {
		r1 = returnFunc(strings...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UdsPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UdsPath'
type MockService_UdsPath_Call struct {
	*mock.Call
}

// UdsPath is a helper method to define mock.On call
//   - strings ...string
func (_e *MockService_Expecter) UdsPath(strings ...interface{}) *MockService_UdsPath_Call {
	return &MockService_UdsPath_Call{Call: _e.mock.On("UdsPath",
		append([]interface{}{}, strings...)...)}
}

func (_c *MockService_UdsPath_Call) Run(run func(strings ...string)) *MockService_UdsPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockService_UdsPath_Call) Return(s string, err error) *MockService_UdsPath_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_UdsPath_Call) RunAndReturn(run func(strings ...string) (string, error)) *MockService_UdsPath_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function for the type MockService
func (_mock *MockService) User() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockService_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type MockService_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
func (_e *MockService_Expecter) User() *MockService_User_Call {
	return &MockService_User_Call{Call: _e.mock.On("User")}
}

func (_c *MockService_User_Call) Run(run func()) *MockService_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_User_Call) Return(s string) *MockService_User_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockService_User_Call) RunAndReturn(run func() string) *MockService_User_Call {
	_c.Call.Return(run)
	return _c
}

// Workspace provides a mock function for the type MockService
func (_mock *MockService) Workspace() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Workspace")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockService_Workspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Workspace'
type MockService_Workspace_Call struct {
	*mock.Call
}

// Workspace is a helper method to define mock.On call
func (_e *MockService_Expecter) Workspace() *MockService_Workspace_Call {
	return &MockService_Workspace_Call{Call: _e.mock.On("Workspace")}
}

func (_c *MockService_Workspace_Call) Run(run func()) *MockService_Workspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Workspace_Call) Return(s string) *MockService_Workspace_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockService_Workspace_Call) RunAndReturn(run func() string) *MockService_Workspace_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspaceConfigPaths provides a mock function for the type MockService
func (_mock *MockService) WorkspaceConfigPaths() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WorkspaceConfigPaths")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockService_WorkspaceConfigPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspaceConfigPaths'
type MockService_WorkspaceConfigPaths_Call struct {
	*mock.Call
}

// WorkspaceConfigPaths is a helper method to define mock.On call
func (_e *MockService_Expecter) WorkspaceConfigPaths() *MockService_WorkspaceConfigPaths_Call {
	return &MockService_WorkspaceConfigPaths_Call{Call: _e.mock.On("WorkspaceConfigPaths")}
}

func (_c *MockService_WorkspaceConfigPaths_Call) Run(run func()) *MockService_WorkspaceConfigPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_WorkspaceConfigPaths_Call) Return(stringToString map[string]string) *MockService_WorkspaceConfigPaths_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockService_WorkspaceConfigPaths_Call) RunAndReturn(run func() map[string]string) *MockService_WorkspaceConfigPaths_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspaceScriptPaths provides a mock function for the type MockService
func (_mock *MockService) WorkspaceScriptPaths() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WorkspaceScriptPaths")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockService_WorkspaceScriptPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspaceScriptPaths'
type MockService_WorkspaceScriptPaths_Call struct {
	*mock.Call
}

// WorkspaceScriptPaths is a helper method to define mock.On call
func (_e *MockService_Expecter) WorkspaceScriptPaths() *MockService_WorkspaceScriptPaths_Call {
	return &MockService_WorkspaceScriptPaths_Call{Call: _e.mock.On("WorkspaceScriptPaths")}
}

func (_c *MockService_WorkspaceScriptPaths_Call) Run(run func()) *MockService_WorkspaceScriptPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_WorkspaceScriptPaths_Call) Return(stringToString map[string]string) *MockService_WorkspaceScriptPaths_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockService_WorkspaceScriptPaths_Call) RunAndReturn(run func() map[string]string) *MockService_WorkspaceScriptPaths_Call {
	_c.Call.Return(run)
	return _c
}
