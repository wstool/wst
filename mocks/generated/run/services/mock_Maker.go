// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package services

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/conf/types"
	"github.com/wstool/wst/run/environments"
	"github.com/wstool/wst/run/parameters"
	"github.com/wstool/wst/run/resources"
	"github.com/wstool/wst/run/servers"
	"github.com/wstool/wst/run/services"
	"github.com/wstool/wst/run/spec/defaults"
)

// NewMockMaker creates a new instance of MockMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaker {
	mock := &MockMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMaker is an autogenerated mock type for the Maker type
type MockMaker struct {
	mock.Mock
}

type MockMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaker) EXPECT() *MockMaker_Expecter {
	return &MockMaker_Expecter{mock: &_m.Mock}
}

// Make provides a mock function for the type MockMaker
func (_mock *MockMaker) Make(config map[string]types.Service, dflts *defaults.Defaults, rscrs *resources.Resources, srvs servers.Servers, environments1 environments.Environments, instanceName string, instanceIdx int, instanceWorkspace string, instanceParameters parameters.Parameters) (services.ServiceLocator, error) {
	ret := _mock.Called(config, dflts, rscrs, srvs, environments1, instanceName, instanceIdx, instanceWorkspace, instanceParameters)

	if len(ret) == 0 {
		panic("no return value specified for Make")
	}

	var r0 services.ServiceLocator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(map[string]types.Service, *defaults.Defaults, *resources.Resources, servers.Servers, environments.Environments, string, int, string, parameters.Parameters) (services.ServiceLocator, error)); ok {
		return returnFunc(config, dflts, rscrs, srvs, environments1, instanceName, instanceIdx, instanceWorkspace, instanceParameters)
	}
	if returnFunc, ok := ret.Get(0).(func(map[string]types.Service, *defaults.Defaults, *resources.Resources, servers.Servers, environments.Environments, string, int, string, parameters.Parameters) services.ServiceLocator); ok {
		r0 = returnFunc(config, dflts, rscrs, srvs, environments1, instanceName, instanceIdx, instanceWorkspace, instanceParameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.ServiceLocator)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(map[string]types.Service, *defaults.Defaults, *resources.Resources, servers.Servers, environments.Environments, string, int, string, parameters.Parameters) error); ok {
		r1 = returnFunc(config, dflts, rscrs, srvs, environments1, instanceName, instanceIdx, instanceWorkspace, instanceParameters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMaker_Make_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Make'
type MockMaker_Make_Call struct {
	*mock.Call
}

// Make is a helper method to define mock.On call
//   - config map[string]types.Service
//   - dflts *defaults.Defaults
//   - rscrs *resources.Resources
//   - srvs servers.Servers
//   - environments1 environments.Environments
//   - instanceName string
//   - instanceIdx int
//   - instanceWorkspace string
//   - instanceParameters parameters.Parameters
func (_e *MockMaker_Expecter) Make(config interface{}, dflts interface{}, rscrs interface{}, srvs interface{}, environments1 interface{}, instanceName interface{}, instanceIdx interface{}, instanceWorkspace interface{}, instanceParameters interface{}) *MockMaker_Make_Call {
	return &MockMaker_Make_Call{Call: _e.mock.On("Make", config, dflts, rscrs, srvs, environments1, instanceName, instanceIdx, instanceWorkspace, instanceParameters)}
}

func (_c *MockMaker_Make_Call) Run(run func(config map[string]types.Service, dflts *defaults.Defaults, rscrs *resources.Resources, srvs servers.Servers, environments1 environments.Environments, instanceName string, instanceIdx int, instanceWorkspace string, instanceParameters parameters.Parameters)) *MockMaker_Make_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]types.Service
		if args[0] != nil {
			arg0 = args[0].(map[string]types.Service)
		}
		var arg1 *defaults.Defaults
		if args[1] != nil {
			arg1 = args[1].(*defaults.Defaults)
		}
		var arg2 *resources.Resources
		if args[2] != nil {
			arg2 = args[2].(*resources.Resources)
		}
		var arg3 servers.Servers
		if args[3] != nil {
			arg3 = args[3].(servers.Servers)
		}
		var arg4 environments.Environments
		if args[4] != nil {
			arg4 = args[4].(environments.Environments)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 int
		if args[6] != nil {
			arg6 = args[6].(int)
		}
		var arg7 string
		if args[7] != nil {
			arg7 = args[7].(string)
		}
		var arg8 parameters.Parameters
		if args[8] != nil {
			arg8 = args[8].(parameters.Parameters)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
		)
	})
	return _c
}

func (_c *MockMaker_Make_Call) Return(serviceLocator services.ServiceLocator, err error) *MockMaker_Make_Call {
	_c.Call.Return(serviceLocator, err)
	return _c
}

func (_c *MockMaker_Make_Call) RunAndReturn(run func(config map[string]types.Service, dflts *defaults.Defaults, rscrs *resources.Resources, srvs servers.Servers, environments1 environments.Environments, instanceName string, instanceIdx int, instanceWorkspace string, instanceParameters parameters.Parameters) (services.ServiceLocator, error)) *MockMaker_Make_Call {
	_c.Call.Return(run)
	return _c
}
