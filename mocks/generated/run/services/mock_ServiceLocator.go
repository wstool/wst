// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package services

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/run/services"
)

// NewMockServiceLocator creates a new instance of MockServiceLocator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceLocator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceLocator {
	mock := &MockServiceLocator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceLocator is an autogenerated mock type for the ServiceLocator type
type MockServiceLocator struct {
	mock.Mock
}

type MockServiceLocator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceLocator) EXPECT() *MockServiceLocator_Expecter {
	return &MockServiceLocator_Expecter{mock: &_m.Mock}
}

// Find provides a mock function for the type MockServiceLocator
func (_mock *MockServiceLocator) Find(name string) (services.Service, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 services.Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (services.Service, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) services.Service); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceLocator_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockServiceLocator_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - name string
func (_e *MockServiceLocator_Expecter) Find(name interface{}) *MockServiceLocator_Find_Call {
	return &MockServiceLocator_Find_Call{Call: _e.mock.On("Find", name)}
}

func (_c *MockServiceLocator_Find_Call) Run(run func(name string)) *MockServiceLocator_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceLocator_Find_Call) Return(service services.Service, err error) *MockServiceLocator_Find_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockServiceLocator_Find_Call) RunAndReturn(run func(name string) (services.Service, error)) *MockServiceLocator_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Services provides a mock function for the type MockServiceLocator
func (_mock *MockServiceLocator) Services() services.Services {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Services")
	}

	var r0 services.Services
	if returnFunc, ok := ret.Get(0).(func() services.Services); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.Services)
		}
	}
	return r0
}

// MockServiceLocator_Services_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Services'
type MockServiceLocator_Services_Call struct {
	*mock.Call
}

// Services is a helper method to define mock.On call
func (_e *MockServiceLocator_Expecter) Services() *MockServiceLocator_Services_Call {
	return &MockServiceLocator_Services_Call{Call: _e.mock.On("Services")}
}

func (_c *MockServiceLocator_Services_Call) Run(run func()) *MockServiceLocator_Services_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceLocator_Services_Call) Return(services1 services.Services) *MockServiceLocator_Services_Call {
	_c.Call.Return(services1)
	return _c
}

func (_c *MockServiceLocator_Services_Call) RunAndReturn(run func() services.Services) *MockServiceLocator_Services_Call {
	_c.Call.Return(run)
	return _c
}
