// Code generated by mockery v2.40.1. DO NOT EDIT.

package service

import (
	dir "github.com/bukka/wst/run/sandboxes/dir"
	mock "github.com/stretchr/testify/mock"
)

// MockTemplateService is an autogenerated mock type for the TemplateService type
type MockTemplateService struct {
	mock.Mock
}

type MockTemplateService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplateService) EXPECT() *MockTemplateService_Expecter {
	return &MockTemplateService_Expecter{mock: &_m.Mock}
}

// Dirs provides a mock function with given fields:
func (_m *MockTemplateService) Dirs() map[dir.DirType]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dirs")
	}

	var r0 map[dir.DirType]string
	if rf, ok := ret.Get(0).(func() map[dir.DirType]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[dir.DirType]string)
		}
	}

	return r0
}

// MockTemplateService_Dirs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dirs'
type MockTemplateService_Dirs_Call struct {
	*mock.Call
}

// Dirs is a helper method to define mock.On call
func (_e *MockTemplateService_Expecter) Dirs() *MockTemplateService_Dirs_Call {
	return &MockTemplateService_Dirs_Call{Call: _e.mock.On("Dirs")}
}

func (_c *MockTemplateService_Dirs_Call) Run(run func()) *MockTemplateService_Dirs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTemplateService_Dirs_Call) Return(_a0 map[dir.DirType]string) *MockTemplateService_Dirs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplateService_Dirs_Call) RunAndReturn(run func() map[dir.DirType]string) *MockTemplateService_Dirs_Call {
	_c.Call.Return(run)
	return _c
}

// EnvironmentConfigPaths provides a mock function with given fields:
func (_m *MockTemplateService) EnvironmentConfigPaths() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnvironmentConfigPaths")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockTemplateService_EnvironmentConfigPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnvironmentConfigPaths'
type MockTemplateService_EnvironmentConfigPaths_Call struct {
	*mock.Call
}

// EnvironmentConfigPaths is a helper method to define mock.On call
func (_e *MockTemplateService_Expecter) EnvironmentConfigPaths() *MockTemplateService_EnvironmentConfigPaths_Call {
	return &MockTemplateService_EnvironmentConfigPaths_Call{Call: _e.mock.On("EnvironmentConfigPaths")}
}

func (_c *MockTemplateService_EnvironmentConfigPaths_Call) Run(run func()) *MockTemplateService_EnvironmentConfigPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTemplateService_EnvironmentConfigPaths_Call) Return(_a0 map[string]string) *MockTemplateService_EnvironmentConfigPaths_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplateService_EnvironmentConfigPaths_Call) RunAndReturn(run func() map[string]string) *MockTemplateService_EnvironmentConfigPaths_Call {
	_c.Call.Return(run)
	return _c
}

// Group provides a mock function with given fields:
func (_m *MockTemplateService) Group() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTemplateService_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type MockTemplateService_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
func (_e *MockTemplateService_Expecter) Group() *MockTemplateService_Group_Call {
	return &MockTemplateService_Group_Call{Call: _e.mock.On("Group")}
}

func (_c *MockTemplateService_Group_Call) Run(run func()) *MockTemplateService_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTemplateService_Group_Call) Return(_a0 string) *MockTemplateService_Group_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplateService_Group_Call) RunAndReturn(run func() string) *MockTemplateService_Group_Call {
	_c.Call.Return(run)
	return _c
}

// Pid provides a mock function with given fields:
func (_m *MockTemplateService) Pid() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pid")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemplateService_Pid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pid'
type MockTemplateService_Pid_Call struct {
	*mock.Call
}

// Pid is a helper method to define mock.On call
func (_e *MockTemplateService_Expecter) Pid() *MockTemplateService_Pid_Call {
	return &MockTemplateService_Pid_Call{Call: _e.mock.On("Pid")}
}

func (_c *MockTemplateService_Pid_Call) Run(run func()) *MockTemplateService_Pid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTemplateService_Pid_Call) Return(_a0 int, _a1 error) *MockTemplateService_Pid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemplateService_Pid_Call) RunAndReturn(run func() (int, error)) *MockTemplateService_Pid_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateUrl provides a mock function with given fields:
func (_m *MockTemplateService) PrivateUrl() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrivateUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemplateService_PrivateUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateUrl'
type MockTemplateService_PrivateUrl_Call struct {
	*mock.Call
}

// PrivateUrl is a helper method to define mock.On call
func (_e *MockTemplateService_Expecter) PrivateUrl() *MockTemplateService_PrivateUrl_Call {
	return &MockTemplateService_PrivateUrl_Call{Call: _e.mock.On("PrivateUrl")}
}

func (_c *MockTemplateService_PrivateUrl_Call) Run(run func()) *MockTemplateService_PrivateUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTemplateService_PrivateUrl_Call) Return(_a0 string, _a1 error) *MockTemplateService_PrivateUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemplateService_PrivateUrl_Call) RunAndReturn(run func() (string, error)) *MockTemplateService_PrivateUrl_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function with given fields:
func (_m *MockTemplateService) User() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTemplateService_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type MockTemplateService_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
func (_e *MockTemplateService_Expecter) User() *MockTemplateService_User_Call {
	return &MockTemplateService_User_Call{Call: _e.mock.On("User")}
}

func (_c *MockTemplateService_User_Call) Run(run func()) *MockTemplateService_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTemplateService_User_Call) Return(_a0 string) *MockTemplateService_User_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplateService_User_Call) RunAndReturn(run func() string) *MockTemplateService_User_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemplateService creates a new instance of MockTemplateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplateService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplateService {
	mock := &MockTemplateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
