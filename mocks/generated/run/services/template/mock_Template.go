// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package template

import (
	"io"
	"os"

	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/run/parameters"
)

// NewMockTemplate creates a new instance of MockTemplate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplate {
	mock := &MockTemplate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTemplate is an autogenerated mock type for the Template type
type MockTemplate struct {
	mock.Mock
}

type MockTemplate_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplate) EXPECT() *MockTemplate_Expecter {
	return &MockTemplate_Expecter{mock: &_m.Mock}
}

// RenderToFile provides a mock function for the type MockTemplate
func (_mock *MockTemplate) RenderToFile(content string, parameters1 parameters.Parameters, filePath string, perm os.FileMode) error {
	ret := _mock.Called(content, parameters1, filePath, perm)

	if len(ret) == 0 {
		panic("no return value specified for RenderToFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, parameters.Parameters, string, os.FileMode) error); ok {
		r0 = returnFunc(content, parameters1, filePath, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplate_RenderToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderToFile'
type MockTemplate_RenderToFile_Call struct {
	*mock.Call
}

// RenderToFile is a helper method to define mock.On call
//   - content string
//   - parameters1 parameters.Parameters
//   - filePath string
//   - perm os.FileMode
func (_e *MockTemplate_Expecter) RenderToFile(content interface{}, parameters1 interface{}, filePath interface{}, perm interface{}) *MockTemplate_RenderToFile_Call {
	return &MockTemplate_RenderToFile_Call{Call: _e.mock.On("RenderToFile", content, parameters1, filePath, perm)}
}

func (_c *MockTemplate_RenderToFile_Call) Run(run func(content string, parameters1 parameters.Parameters, filePath string, perm os.FileMode)) *MockTemplate_RenderToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 parameters.Parameters
		if args[1] != nil {
			arg1 = args[1].(parameters.Parameters)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 os.FileMode
		if args[3] != nil {
			arg3 = args[3].(os.FileMode)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTemplate_RenderToFile_Call) Return(err error) *MockTemplate_RenderToFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplate_RenderToFile_Call) RunAndReturn(run func(content string, parameters1 parameters.Parameters, filePath string, perm os.FileMode) error) *MockTemplate_RenderToFile_Call {
	_c.Call.Return(run)
	return _c
}

// RenderToString provides a mock function for the type MockTemplate
func (_mock *MockTemplate) RenderToString(content string, parameters1 parameters.Parameters) (string, error) {
	ret := _mock.Called(content, parameters1)

	if len(ret) == 0 {
		panic("no return value specified for RenderToString")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, parameters.Parameters) (string, error)); ok {
		return returnFunc(content, parameters1)
	}
	if returnFunc, ok := ret.Get(0).(func(string, parameters.Parameters) string); ok {
		r0 = returnFunc(content, parameters1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, parameters.Parameters) error); ok {
		r1 = returnFunc(content, parameters1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplate_RenderToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderToString'
type MockTemplate_RenderToString_Call struct {
	*mock.Call
}

// RenderToString is a helper method to define mock.On call
//   - content string
//   - parameters1 parameters.Parameters
func (_e *MockTemplate_Expecter) RenderToString(content interface{}, parameters1 interface{}) *MockTemplate_RenderToString_Call {
	return &MockTemplate_RenderToString_Call{Call: _e.mock.On("RenderToString", content, parameters1)}
}

func (_c *MockTemplate_RenderToString_Call) Run(run func(content string, parameters1 parameters.Parameters)) *MockTemplate_RenderToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 parameters.Parameters
		if args[1] != nil {
			arg1 = args[1].(parameters.Parameters)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTemplate_RenderToString_Call) Return(s string, err error) *MockTemplate_RenderToString_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTemplate_RenderToString_Call) RunAndReturn(run func(content string, parameters1 parameters.Parameters) (string, error)) *MockTemplate_RenderToString_Call {
	_c.Call.Return(run)
	return _c
}

// RenderToWriter provides a mock function for the type MockTemplate
func (_mock *MockTemplate) RenderToWriter(content string, parameters1 parameters.Parameters, writer io.Writer) error {
	ret := _mock.Called(content, parameters1, writer)

	if len(ret) == 0 {
		panic("no return value specified for RenderToWriter")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, parameters.Parameters, io.Writer) error); ok {
		r0 = returnFunc(content, parameters1, writer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplate_RenderToWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderToWriter'
type MockTemplate_RenderToWriter_Call struct {
	*mock.Call
}

// RenderToWriter is a helper method to define mock.On call
//   - content string
//   - parameters1 parameters.Parameters
//   - writer io.Writer
func (_e *MockTemplate_Expecter) RenderToWriter(content interface{}, parameters1 interface{}, writer interface{}) *MockTemplate_RenderToWriter_Call {
	return &MockTemplate_RenderToWriter_Call{Call: _e.mock.On("RenderToWriter", content, parameters1, writer)}
}

func (_c *MockTemplate_RenderToWriter_Call) Run(run func(content string, parameters1 parameters.Parameters, writer io.Writer)) *MockTemplate_RenderToWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 parameters.Parameters
		if args[1] != nil {
			arg1 = args[1].(parameters.Parameters)
		}
		var arg2 io.Writer
		if args[2] != nil {
			arg2 = args[2].(io.Writer)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTemplate_RenderToWriter_Call) Return(err error) *MockTemplate_RenderToWriter_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplate_RenderToWriter_Call) RunAndReturn(run func(content string, parameters1 parameters.Parameters, writer io.Writer) error) *MockTemplate_RenderToWriter_Call {
	_c.Call.Return(run)
	return _c
}
