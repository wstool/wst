// Code generated by mockery v2.40.1. DO NOT EDIT.

package template

import (
	io "io"
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
	parameters "github.com/wstool/wst/run/parameters"
)

// MockTemplate is an autogenerated mock type for the Template type
type MockTemplate struct {
	mock.Mock
}

type MockTemplate_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplate) EXPECT() *MockTemplate_Expecter {
	return &MockTemplate_Expecter{mock: &_m.Mock}
}

// RenderToFile provides a mock function with given fields: content, _a1, filePath, perm
func (_m *MockTemplate) RenderToFile(content string, _a1 parameters.Parameters, filePath string, perm fs.FileMode) error {
	ret := _m.Called(content, _a1, filePath, perm)

	if len(ret) == 0 {
		panic("no return value specified for RenderToFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, parameters.Parameters, string, fs.FileMode) error); ok {
		r0 = rf(content, _a1, filePath, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemplate_RenderToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderToFile'
type MockTemplate_RenderToFile_Call struct {
	*mock.Call
}

// RenderToFile is a helper method to define mock.On call
//   - content string
//   - _a1 parameters.Parameters
//   - filePath string
//   - perm fs.FileMode
func (_e *MockTemplate_Expecter) RenderToFile(content interface{}, _a1 interface{}, filePath interface{}, perm interface{}) *MockTemplate_RenderToFile_Call {
	return &MockTemplate_RenderToFile_Call{Call: _e.mock.On("RenderToFile", content, _a1, filePath, perm)}
}

func (_c *MockTemplate_RenderToFile_Call) Run(run func(content string, _a1 parameters.Parameters, filePath string, perm fs.FileMode)) *MockTemplate_RenderToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(parameters.Parameters), args[2].(string), args[3].(fs.FileMode))
	})
	return _c
}

func (_c *MockTemplate_RenderToFile_Call) Return(_a0 error) *MockTemplate_RenderToFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplate_RenderToFile_Call) RunAndReturn(run func(string, parameters.Parameters, string, fs.FileMode) error) *MockTemplate_RenderToFile_Call {
	_c.Call.Return(run)
	return _c
}

// RenderToString provides a mock function with given fields: content, _a1
func (_m *MockTemplate) RenderToString(content string, _a1 parameters.Parameters) (string, error) {
	ret := _m.Called(content, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RenderToString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, parameters.Parameters) (string, error)); ok {
		return rf(content, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, parameters.Parameters) string); ok {
		r0 = rf(content, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, parameters.Parameters) error); ok {
		r1 = rf(content, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemplate_RenderToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderToString'
type MockTemplate_RenderToString_Call struct {
	*mock.Call
}

// RenderToString is a helper method to define mock.On call
//   - content string
//   - _a1 parameters.Parameters
func (_e *MockTemplate_Expecter) RenderToString(content interface{}, _a1 interface{}) *MockTemplate_RenderToString_Call {
	return &MockTemplate_RenderToString_Call{Call: _e.mock.On("RenderToString", content, _a1)}
}

func (_c *MockTemplate_RenderToString_Call) Run(run func(content string, _a1 parameters.Parameters)) *MockTemplate_RenderToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(parameters.Parameters))
	})
	return _c
}

func (_c *MockTemplate_RenderToString_Call) Return(_a0 string, _a1 error) *MockTemplate_RenderToString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemplate_RenderToString_Call) RunAndReturn(run func(string, parameters.Parameters) (string, error)) *MockTemplate_RenderToString_Call {
	_c.Call.Return(run)
	return _c
}

// RenderToWriter provides a mock function with given fields: content, _a1, writer
func (_m *MockTemplate) RenderToWriter(content string, _a1 parameters.Parameters, writer io.Writer) error {
	ret := _m.Called(content, _a1, writer)

	if len(ret) == 0 {
		panic("no return value specified for RenderToWriter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, parameters.Parameters, io.Writer) error); ok {
		r0 = rf(content, _a1, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemplate_RenderToWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderToWriter'
type MockTemplate_RenderToWriter_Call struct {
	*mock.Call
}

// RenderToWriter is a helper method to define mock.On call
//   - content string
//   - _a1 parameters.Parameters
//   - writer io.Writer
func (_e *MockTemplate_Expecter) RenderToWriter(content interface{}, _a1 interface{}, writer interface{}) *MockTemplate_RenderToWriter_Call {
	return &MockTemplate_RenderToWriter_Call{Call: _e.mock.On("RenderToWriter", content, _a1, writer)}
}

func (_c *MockTemplate_RenderToWriter_Call) Run(run func(content string, _a1 parameters.Parameters, writer io.Writer)) *MockTemplate_RenderToWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(parameters.Parameters), args[2].(io.Writer))
	})
	return _c
}

func (_c *MockTemplate_RenderToWriter_Call) Return(_a0 error) *MockTemplate_RenderToWriter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplate_RenderToWriter_Call) RunAndReturn(run func(string, parameters.Parameters, io.Writer) error) *MockTemplate_RenderToWriter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemplate creates a new instance of MockTemplate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplate {
	mock := &MockTemplate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
