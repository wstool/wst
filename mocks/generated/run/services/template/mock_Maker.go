// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package template

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/run/servers/templates"
	"github.com/wstool/wst/run/services/template"
	"github.com/wstool/wst/run/services/template/service"
)

// NewMockMaker creates a new instance of MockMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaker {
	mock := &MockMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMaker is an autogenerated mock type for the Maker type
type MockMaker struct {
	mock.Mock
}

type MockMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaker) EXPECT() *MockMaker_Expecter {
	return &MockMaker_Expecter{mock: &_m.Mock}
}

// Make provides a mock function for the type MockMaker
func (_mock *MockMaker) Make(service1 service.TemplateService, services template.Services, serverTemplates templates.Templates) template.Template {
	ret := _mock.Called(service1, services, serverTemplates)

	if len(ret) == 0 {
		panic("no return value specified for Make")
	}

	var r0 template.Template
	if returnFunc, ok := ret.Get(0).(func(service.TemplateService, template.Services, templates.Templates) template.Template); ok {
		r0 = returnFunc(service1, services, serverTemplates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(template.Template)
		}
	}
	return r0
}

// MockMaker_Make_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Make'
type MockMaker_Make_Call struct {
	*mock.Call
}

// Make is a helper method to define mock.On call
//   - service1 service.TemplateService
//   - services template.Services
//   - serverTemplates templates.Templates
func (_e *MockMaker_Expecter) Make(service1 interface{}, services interface{}, serverTemplates interface{}) *MockMaker_Make_Call {
	return &MockMaker_Make_Call{Call: _e.mock.On("Make", service1, services, serverTemplates)}
}

func (_c *MockMaker_Make_Call) Run(run func(service1 service.TemplateService, services template.Services, serverTemplates templates.Templates)) *MockMaker_Make_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 service.TemplateService
		if args[0] != nil {
			arg0 = args[0].(service.TemplateService)
		}
		var arg1 template.Services
		if args[1] != nil {
			arg1 = args[1].(template.Services)
		}
		var arg2 templates.Templates
		if args[2] != nil {
			arg2 = args[2].(templates.Templates)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMaker_Make_Call) Return(template1 template.Template) *MockMaker_Make_Call {
	_c.Call.Return(template1)
	return _c
}

func (_c *MockMaker_Make_Call) RunAndReturn(run func(service1 service.TemplateService, services template.Services, serverTemplates templates.Templates) template.Template) *MockMaker_Make_Call {
	_c.Call.Return(run)
	return _c
}
