// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package factory

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/conf/parser/factory"
)

// NewMockFunctions creates a new instance of MockFunctions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFunctions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFunctions {
	mock := &MockFunctions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFunctions is an autogenerated mock type for the Functions type
type MockFunctions struct {
	mock.Mock
}

type MockFunctions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFunctions) EXPECT() *MockFunctions_Expecter {
	return &MockFunctions_Expecter{mock: &_m.Mock}
}

// GetFactoryFunc provides a mock function for the type MockFunctions
func (_mock *MockFunctions) GetFactoryFunc(funcName string) (factory.Func, error) {
	ret := _mock.Called(funcName)

	if len(ret) == 0 {
		panic("no return value specified for GetFactoryFunc")
	}

	var r0 factory.Func
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (factory.Func, error)); ok {
		return returnFunc(funcName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) factory.Func); ok {
		r0 = returnFunc(funcName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(factory.Func)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(funcName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctions_GetFactoryFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFactoryFunc'
type MockFunctions_GetFactoryFunc_Call struct {
	*mock.Call
}

// GetFactoryFunc is a helper method to define mock.On call
//   - funcName string
func (_e *MockFunctions_Expecter) GetFactoryFunc(funcName interface{}) *MockFunctions_GetFactoryFunc_Call {
	return &MockFunctions_GetFactoryFunc_Call{Call: _e.mock.On("GetFactoryFunc", funcName)}
}

func (_c *MockFunctions_GetFactoryFunc_Call) Run(run func(funcName string)) *MockFunctions_GetFactoryFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFunctions_GetFactoryFunc_Call) Return(funcParam factory.Func, err error) *MockFunctions_GetFactoryFunc_Call {
	_c.Call.Return(funcParam, err)
	return _c
}

func (_c *MockFunctions_GetFactoryFunc_Call) RunAndReturn(run func(funcName string) (factory.Func, error)) *MockFunctions_GetFactoryFunc_Call {
	_c.Call.Return(run)
	return _c
}
