// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package overwrites

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/wstool/wst/conf/types"
)

// NewMockOverwriter creates a new instance of MockOverwriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOverwriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOverwriter {
	mock := &MockOverwriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOverwriter is an autogenerated mock type for the Overwriter type
type MockOverwriter struct {
	mock.Mock
}

type MockOverwriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOverwriter) EXPECT() *MockOverwriter_Expecter {
	return &MockOverwriter_Expecter{mock: &_m.Mock}
}

// Overwrite provides a mock function for the type MockOverwriter
func (_mock *MockOverwriter) Overwrite(config *types.Config, overwrites map[string]string) error {
	ret := _mock.Called(config, overwrites)

	if len(ret) == 0 {
		panic("no return value specified for Overwrite")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*types.Config, map[string]string) error); ok {
		r0 = returnFunc(config, overwrites)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOverwriter_Overwrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Overwrite'
type MockOverwriter_Overwrite_Call struct {
	*mock.Call
}

// Overwrite is a helper method to define mock.On call
//   - config *types.Config
//   - overwrites map[string]string
func (_e *MockOverwriter_Expecter) Overwrite(config interface{}, overwrites interface{}) *MockOverwriter_Overwrite_Call {
	return &MockOverwriter_Overwrite_Call{Call: _e.mock.On("Overwrite", config, overwrites)}
}

func (_c *MockOverwriter_Overwrite_Call) Run(run func(config *types.Config, overwrites map[string]string)) *MockOverwriter_Overwrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *types.Config
		if args[0] != nil {
			arg0 = args[0].(*types.Config)
		}
		var arg1 map[string]string
		if args[1] != nil {
			arg1 = args[1].(map[string]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOverwriter_Overwrite_Call) Return(err error) *MockOverwriter_Overwrite_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOverwriter_Overwrite_Call) RunAndReturn(run func(config *types.Config, overwrites map[string]string) error) *MockOverwriter_Overwrite_Call {
	_c.Call.Return(run)
	return _c
}
