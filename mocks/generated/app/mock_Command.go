// Code generated by mockery v2.40.1. DO NOT EDIT.

package app

import (
	io "io"
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// MockCommand is an autogenerated mock type for the Command type
type MockCommand struct {
	mock.Mock
}

type MockCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommand) EXPECT() *MockCommand_Expecter {
	return &MockCommand_Expecter{mock: &_m.Mock}
}

// IsRunning provides a mock function with given fields:
func (_m *MockCommand) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCommand_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockCommand_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockCommand_Expecter) IsRunning() *MockCommand_IsRunning_Call {
	return &MockCommand_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockCommand_IsRunning_Call) Run(run func()) *MockCommand_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_IsRunning_Call) Return(_a0 bool) *MockCommand_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_IsRunning_Call) RunAndReturn(run func() bool) *MockCommand_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessPid provides a mock function with given fields:
func (_m *MockCommand) ProcessPid() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProcessPid")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockCommand_ProcessPid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessPid'
type MockCommand_ProcessPid_Call struct {
	*mock.Call
}

// ProcessPid is a helper method to define mock.On call
func (_e *MockCommand_Expecter) ProcessPid() *MockCommand_ProcessPid_Call {
	return &MockCommand_ProcessPid_Call{Call: _e.mock.On("ProcessPid")}
}

func (_c *MockCommand_ProcessPid_Call) Run(run func()) *MockCommand_ProcessPid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_ProcessPid_Call) Return(_a0 int) *MockCommand_ProcessPid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_ProcessPid_Call) RunAndReturn(run func() int) *MockCommand_ProcessPid_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessSignal provides a mock function with given fields: sig
func (_m *MockCommand) ProcessSignal(sig os.Signal) error {
	ret := _m.Called(sig)

	if len(ret) == 0 {
		panic("no return value specified for ProcessSignal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(os.Signal) error); ok {
		r0 = rf(sig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommand_ProcessSignal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessSignal'
type MockCommand_ProcessSignal_Call struct {
	*mock.Call
}

// ProcessSignal is a helper method to define mock.On call
//   - sig os.Signal
func (_e *MockCommand_Expecter) ProcessSignal(sig interface{}) *MockCommand_ProcessSignal_Call {
	return &MockCommand_ProcessSignal_Call{Call: _e.mock.On("ProcessSignal", sig)}
}

func (_c *MockCommand_ProcessSignal_Call) Run(run func(sig os.Signal)) *MockCommand_ProcessSignal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(os.Signal))
	})
	return _c
}

func (_c *MockCommand_ProcessSignal_Call) Return(_a0 error) *MockCommand_ProcessSignal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_ProcessSignal_Call) RunAndReturn(run func(os.Signal) error) *MockCommand_ProcessSignal_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields:
func (_m *MockCommand) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommand_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockCommand_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Run() *MockCommand_Run_Call {
	return &MockCommand_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockCommand_Run_Call) Run(run func()) *MockCommand_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Run_Call) Return(_a0 error) *MockCommand_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_Run_Call) RunAndReturn(run func() error) *MockCommand_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SetStderr provides a mock function with given fields: stdout
func (_m *MockCommand) SetStderr(stdout io.Writer) {
	_m.Called(stdout)
}

// MockCommand_SetStderr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStderr'
type MockCommand_SetStderr_Call struct {
	*mock.Call
}

// SetStderr is a helper method to define mock.On call
//   - stdout io.Writer
func (_e *MockCommand_Expecter) SetStderr(stdout interface{}) *MockCommand_SetStderr_Call {
	return &MockCommand_SetStderr_Call{Call: _e.mock.On("SetStderr", stdout)}
}

func (_c *MockCommand_SetStderr_Call) Run(run func(stdout io.Writer)) *MockCommand_SetStderr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockCommand_SetStderr_Call) Return() *MockCommand_SetStderr_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommand_SetStderr_Call) RunAndReturn(run func(io.Writer)) *MockCommand_SetStderr_Call {
	_c.Call.Return(run)
	return _c
}

// SetStdout provides a mock function with given fields: stdout
func (_m *MockCommand) SetStdout(stdout io.Writer) {
	_m.Called(stdout)
}

// MockCommand_SetStdout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStdout'
type MockCommand_SetStdout_Call struct {
	*mock.Call
}

// SetStdout is a helper method to define mock.On call
//   - stdout io.Writer
func (_e *MockCommand_Expecter) SetStdout(stdout interface{}) *MockCommand_SetStdout_Call {
	return &MockCommand_SetStdout_Call{Call: _e.mock.On("SetStdout", stdout)}
}

func (_c *MockCommand_SetStdout_Call) Run(run func(stdout io.Writer)) *MockCommand_SetStdout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockCommand_SetStdout_Call) Return() *MockCommand_SetStdout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommand_SetStdout_Call) RunAndReturn(run func(io.Writer)) *MockCommand_SetStdout_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *MockCommand) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommand_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCommand_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Start() *MockCommand_Start_Call {
	return &MockCommand_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockCommand_Start_Call) Run(run func()) *MockCommand_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Start_Call) Return(_a0 error) *MockCommand_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_Start_Call) RunAndReturn(run func() error) *MockCommand_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StderrPipe provides a mock function with given fields:
func (_m *MockCommand) StderrPipe() (io.ReadCloser, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StderrPipe")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func() (io.ReadCloser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() io.ReadCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommand_StderrPipe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StderrPipe'
type MockCommand_StderrPipe_Call struct {
	*mock.Call
}

// StderrPipe is a helper method to define mock.On call
func (_e *MockCommand_Expecter) StderrPipe() *MockCommand_StderrPipe_Call {
	return &MockCommand_StderrPipe_Call{Call: _e.mock.On("StderrPipe")}
}

func (_c *MockCommand_StderrPipe_Call) Run(run func()) *MockCommand_StderrPipe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_StderrPipe_Call) Return(_a0 io.ReadCloser, _a1 error) *MockCommand_StderrPipe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommand_StderrPipe_Call) RunAndReturn(run func() (io.ReadCloser, error)) *MockCommand_StderrPipe_Call {
	_c.Call.Return(run)
	return _c
}

// StdoutPipe provides a mock function with given fields:
func (_m *MockCommand) StdoutPipe() (io.ReadCloser, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StdoutPipe")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func() (io.ReadCloser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() io.ReadCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommand_StdoutPipe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StdoutPipe'
type MockCommand_StdoutPipe_Call struct {
	*mock.Call
}

// StdoutPipe is a helper method to define mock.On call
func (_e *MockCommand_Expecter) StdoutPipe() *MockCommand_StdoutPipe_Call {
	return &MockCommand_StdoutPipe_Call{Call: _e.mock.On("StdoutPipe")}
}

func (_c *MockCommand_StdoutPipe_Call) Run(run func()) *MockCommand_StdoutPipe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_StdoutPipe_Call) Return(_a0 io.ReadCloser, _a1 error) *MockCommand_StdoutPipe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommand_StdoutPipe_Call) RunAndReturn(run func() (io.ReadCloser, error)) *MockCommand_StdoutPipe_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockCommand) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCommand_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockCommand_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockCommand_Expecter) String() *MockCommand_String_Call {
	return &MockCommand_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockCommand_String_Call) Run(run func()) *MockCommand_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_String_Call) Return(_a0 string) *MockCommand_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_String_Call) RunAndReturn(run func() string) *MockCommand_String_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields:
func (_m *MockCommand) Wait() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommand_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockCommand_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Wait() *MockCommand_Wait_Call {
	return &MockCommand_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *MockCommand_Wait_Call) Run(run func()) *MockCommand_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Wait_Call) Return(_a0 error) *MockCommand_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_Wait_Call) RunAndReturn(run func() error) *MockCommand_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommand creates a new instance of MockCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommand {
	mock := &MockCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
