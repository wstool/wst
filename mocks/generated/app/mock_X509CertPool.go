// Code generated by mockery v2.40.1. DO NOT EDIT.

package app

import (
	x509 "crypto/x509"

	mock "github.com/stretchr/testify/mock"
)

// MockX509CertPool is an autogenerated mock type for the X509CertPool type
type MockX509CertPool struct {
	mock.Mock
}

type MockX509CertPool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockX509CertPool) EXPECT() *MockX509CertPool_Expecter {
	return &MockX509CertPool_Expecter{mock: &_m.Mock}
}

// AppendCertFromPEM provides a mock function with given fields: pem
func (_m *MockX509CertPool) AppendCertFromPEM(pem string) bool {
	ret := _m.Called(pem)

	if len(ret) == 0 {
		panic("no return value specified for AppendCertFromPEM")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pem)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockX509CertPool_AppendCertFromPEM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendCertFromPEM'
type MockX509CertPool_AppendCertFromPEM_Call struct {
	*mock.Call
}

// AppendCertFromPEM is a helper method to define mock.On call
//   - pem string
func (_e *MockX509CertPool_Expecter) AppendCertFromPEM(pem interface{}) *MockX509CertPool_AppendCertFromPEM_Call {
	return &MockX509CertPool_AppendCertFromPEM_Call{Call: _e.mock.On("AppendCertFromPEM", pem)}
}

func (_c *MockX509CertPool_AppendCertFromPEM_Call) Run(run func(pem string)) *MockX509CertPool_AppendCertFromPEM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockX509CertPool_AppendCertFromPEM_Call) Return(_a0 bool) *MockX509CertPool_AppendCertFromPEM_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockX509CertPool_AppendCertFromPEM_Call) RunAndReturn(run func(string) bool) *MockX509CertPool_AppendCertFromPEM_Call {
	_c.Call.Return(run)
	return _c
}

// CertPool provides a mock function with given fields:
func (_m *MockX509CertPool) CertPool() *x509.CertPool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertPool")
	}

	var r0 *x509.CertPool
	if rf, ok := ret.Get(0).(func() *x509.CertPool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*x509.CertPool)
		}
	}

	return r0
}

// MockX509CertPool_CertPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertPool'
type MockX509CertPool_CertPool_Call struct {
	*mock.Call
}

// CertPool is a helper method to define mock.On call
func (_e *MockX509CertPool_Expecter) CertPool() *MockX509CertPool_CertPool_Call {
	return &MockX509CertPool_CertPool_Call{Call: _e.mock.On("CertPool")}
}

func (_c *MockX509CertPool_CertPool_Call) Run(run func()) *MockX509CertPool_CertPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockX509CertPool_CertPool_Call) Return(_a0 *x509.CertPool) *MockX509CertPool_CertPool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockX509CertPool_CertPool_Call) RunAndReturn(run func() *x509.CertPool) *MockX509CertPool_CertPool_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockX509CertPool creates a new instance of MockX509CertPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockX509CertPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockX509CertPool {
	mock := &MockX509CertPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
