// Code generated by mockery v2.40.1. DO NOT EDIT.

package app

import (
	app "github.com/bukka/wst/app"
	afero "github.com/spf13/afero"

	context "context"

	mock "github.com/stretchr/testify/mock"

	user "os/user"

	zap "go.uber.org/zap"
)

// MockFoundation is an autogenerated mock type for the Foundation type
type MockFoundation struct {
	mock.Mock
}

type MockFoundation_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFoundation) EXPECT() *MockFoundation_Expecter {
	return &MockFoundation_Expecter{mock: &_m.Mock}
}

// CurrentUser provides a mock function with given fields:
func (_m *MockFoundation) CurrentUser() (*user.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentUser")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func() (*user.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *user.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFoundation_CurrentUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentUser'
type MockFoundation_CurrentUser_Call struct {
	*mock.Call
}

// CurrentUser is a helper method to define mock.On call
func (_e *MockFoundation_Expecter) CurrentUser() *MockFoundation_CurrentUser_Call {
	return &MockFoundation_CurrentUser_Call{Call: _e.mock.On("CurrentUser")}
}

func (_c *MockFoundation_CurrentUser_Call) Run(run func()) *MockFoundation_CurrentUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFoundation_CurrentUser_Call) Return(_a0 *user.User, _a1 error) *MockFoundation_CurrentUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFoundation_CurrentUser_Call) RunAndReturn(run func() (*user.User, error)) *MockFoundation_CurrentUser_Call {
	_c.Call.Return(run)
	return _c
}

// DryRun provides a mock function with given fields:
func (_m *MockFoundation) DryRun() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DryRun")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFoundation_DryRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DryRun'
type MockFoundation_DryRun_Call struct {
	*mock.Call
}

// DryRun is a helper method to define mock.On call
func (_e *MockFoundation_Expecter) DryRun() *MockFoundation_DryRun_Call {
	return &MockFoundation_DryRun_Call{Call: _e.mock.On("DryRun")}
}

func (_c *MockFoundation_DryRun_Call) Run(run func()) *MockFoundation_DryRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFoundation_DryRun_Call) Return(_a0 bool) *MockFoundation_DryRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFoundation_DryRun_Call) RunAndReturn(run func() bool) *MockFoundation_DryRun_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCommand provides a mock function with given fields: ctx, name, args
func (_m *MockFoundation) ExecCommand(ctx context.Context, name string, args []string) app.Command {
	ret := _m.Called(ctx, name, args)

	if len(ret) == 0 {
		panic("no return value specified for ExecCommand")
	}

	var r0 app.Command
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) app.Command); ok {
		r0 = rf(ctx, name, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(app.Command)
		}
	}

	return r0
}

// MockFoundation_ExecCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommand'
type MockFoundation_ExecCommand_Call struct {
	*mock.Call
}

// ExecCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - args []string
func (_e *MockFoundation_Expecter) ExecCommand(ctx interface{}, name interface{}, args interface{}) *MockFoundation_ExecCommand_Call {
	return &MockFoundation_ExecCommand_Call{Call: _e.mock.On("ExecCommand", ctx, name, args)}
}

func (_c *MockFoundation_ExecCommand_Call) Run(run func(ctx context.Context, name string, args []string)) *MockFoundation_ExecCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockFoundation_ExecCommand_Call) Return(_a0 app.Command) *MockFoundation_ExecCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFoundation_ExecCommand_Call) RunAndReturn(run func(context.Context, string, []string) app.Command) *MockFoundation_ExecCommand_Call {
	_c.Call.Return(run)
	return _c
}

// Fs provides a mock function with given fields:
func (_m *MockFoundation) Fs() afero.Fs {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fs")
	}

	var r0 afero.Fs
	if rf, ok := ret.Get(0).(func() afero.Fs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.Fs)
		}
	}

	return r0
}

// MockFoundation_Fs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fs'
type MockFoundation_Fs_Call struct {
	*mock.Call
}

// Fs is a helper method to define mock.On call
func (_e *MockFoundation_Expecter) Fs() *MockFoundation_Fs_Call {
	return &MockFoundation_Fs_Call{Call: _e.mock.On("Fs")}
}

func (_c *MockFoundation_Fs_Call) Run(run func()) *MockFoundation_Fs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFoundation_Fs_Call) Return(_a0 afero.Fs) *MockFoundation_Fs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFoundation_Fs_Call) RunAndReturn(run func() afero.Fs) *MockFoundation_Fs_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateUuid provides a mock function with given fields:
func (_m *MockFoundation) GenerateUuid() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateUuid")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFoundation_GenerateUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateUuid'
type MockFoundation_GenerateUuid_Call struct {
	*mock.Call
}

// GenerateUuid is a helper method to define mock.On call
func (_e *MockFoundation_Expecter) GenerateUuid() *MockFoundation_GenerateUuid_Call {
	return &MockFoundation_GenerateUuid_Call{Call: _e.mock.On("GenerateUuid")}
}

func (_c *MockFoundation_GenerateUuid_Call) Run(run func()) *MockFoundation_GenerateUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFoundation_GenerateUuid_Call) Return(_a0 string) *MockFoundation_GenerateUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFoundation_GenerateUuid_Call) RunAndReturn(run func() string) *MockFoundation_GenerateUuid_Call {
	_c.Call.Return(run)
	return _c
}

// HttpClient provides a mock function with given fields:
func (_m *MockFoundation) HttpClient() app.HttpClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HttpClient")
	}

	var r0 app.HttpClient
	if rf, ok := ret.Get(0).(func() app.HttpClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(app.HttpClient)
		}
	}

	return r0
}

// MockFoundation_HttpClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HttpClient'
type MockFoundation_HttpClient_Call struct {
	*mock.Call
}

// HttpClient is a helper method to define mock.On call
func (_e *MockFoundation_Expecter) HttpClient() *MockFoundation_HttpClient_Call {
	return &MockFoundation_HttpClient_Call{Call: _e.mock.On("HttpClient")}
}

func (_c *MockFoundation_HttpClient_Call) Run(run func()) *MockFoundation_HttpClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFoundation_HttpClient_Call) Return(_a0 app.HttpClient) *MockFoundation_HttpClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFoundation_HttpClient_Call) RunAndReturn(run func() app.HttpClient) *MockFoundation_HttpClient_Call {
	_c.Call.Return(run)
	return _c
}

// Logger provides a mock function with given fields:
func (_m *MockFoundation) Logger() *zap.SugaredLogger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 *zap.SugaredLogger
	if rf, ok := ret.Get(0).(func() *zap.SugaredLogger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.SugaredLogger)
		}
	}

	return r0
}

// MockFoundation_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type MockFoundation_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
func (_e *MockFoundation_Expecter) Logger() *MockFoundation_Logger_Call {
	return &MockFoundation_Logger_Call{Call: _e.mock.On("Logger")}
}

func (_c *MockFoundation_Logger_Call) Run(run func()) *MockFoundation_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFoundation_Logger_Call) Return(_a0 *zap.SugaredLogger) *MockFoundation_Logger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFoundation_Logger_Call) RunAndReturn(run func() *zap.SugaredLogger) *MockFoundation_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// LookupEnvVar provides a mock function with given fields: key
func (_m *MockFoundation) LookupEnvVar(key string) (string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for LookupEnvVar")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockFoundation_LookupEnvVar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupEnvVar'
type MockFoundation_LookupEnvVar_Call struct {
	*mock.Call
}

// LookupEnvVar is a helper method to define mock.On call
//   - key string
func (_e *MockFoundation_Expecter) LookupEnvVar(key interface{}) *MockFoundation_LookupEnvVar_Call {
	return &MockFoundation_LookupEnvVar_Call{Call: _e.mock.On("LookupEnvVar", key)}
}

func (_c *MockFoundation_LookupEnvVar_Call) Run(run func(key string)) *MockFoundation_LookupEnvVar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFoundation_LookupEnvVar_Call) Return(_a0 string, _a1 bool) *MockFoundation_LookupEnvVar_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFoundation_LookupEnvVar_Call) RunAndReturn(run func(string) (string, bool)) *MockFoundation_LookupEnvVar_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function with given fields: username
func (_m *MockFoundation) User(username string) (*user.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*user.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFoundation_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type MockFoundation_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
//   - username string
func (_e *MockFoundation_Expecter) User(username interface{}) *MockFoundation_User_Call {
	return &MockFoundation_User_Call{Call: _e.mock.On("User", username)}
}

func (_c *MockFoundation_User_Call) Run(run func(username string)) *MockFoundation_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFoundation_User_Call) Return(_a0 *user.User, _a1 error) *MockFoundation_User_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFoundation_User_Call) RunAndReturn(run func(string) (*user.User, error)) *MockFoundation_User_Call {
	_c.Call.Return(run)
	return _c
}

// UserGroup provides a mock function with given fields: u
func (_m *MockFoundation) UserGroup(u *user.User) (*user.Group, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for UserGroup")
	}

	var r0 *user.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User) (*user.Group, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(*user.User) *user.Group); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFoundation_UserGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserGroup'
type MockFoundation_UserGroup_Call struct {
	*mock.Call
}

// UserGroup is a helper method to define mock.On call
//   - u *user.User
func (_e *MockFoundation_Expecter) UserGroup(u interface{}) *MockFoundation_UserGroup_Call {
	return &MockFoundation_UserGroup_Call{Call: _e.mock.On("UserGroup", u)}
}

func (_c *MockFoundation_UserGroup_Call) Run(run func(u *user.User)) *MockFoundation_UserGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.User))
	})
	return _c
}

func (_c *MockFoundation_UserGroup_Call) Return(_a0 *user.Group, _a1 error) *MockFoundation_UserGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFoundation_UserGroup_Call) RunAndReturn(run func(*user.User) (*user.Group, error)) *MockFoundation_UserGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UserHomeDir provides a mock function with given fields:
func (_m *MockFoundation) UserHomeDir() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserHomeDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFoundation_UserHomeDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHomeDir'
type MockFoundation_UserHomeDir_Call struct {
	*mock.Call
}

// UserHomeDir is a helper method to define mock.On call
func (_e *MockFoundation_Expecter) UserHomeDir() *MockFoundation_UserHomeDir_Call {
	return &MockFoundation_UserHomeDir_Call{Call: _e.mock.On("UserHomeDir")}
}

func (_c *MockFoundation_UserHomeDir_Call) Run(run func()) *MockFoundation_UserHomeDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFoundation_UserHomeDir_Call) Return(_a0 string, _a1 error) *MockFoundation_UserHomeDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFoundation_UserHomeDir_Call) RunAndReturn(run func() (string, error)) *MockFoundation_UserHomeDir_Call {
	_c.Call.Return(run)
	return _c
}

// VegetaAttacker provides a mock function with given fields:
func (_m *MockFoundation) VegetaAttacker() app.VegetaAttacker {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VegetaAttacker")
	}

	var r0 app.VegetaAttacker
	if rf, ok := ret.Get(0).(func() app.VegetaAttacker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(app.VegetaAttacker)
		}
	}

	return r0
}

// MockFoundation_VegetaAttacker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VegetaAttacker'
type MockFoundation_VegetaAttacker_Call struct {
	*mock.Call
}

// VegetaAttacker is a helper method to define mock.On call
func (_e *MockFoundation_Expecter) VegetaAttacker() *MockFoundation_VegetaAttacker_Call {
	return &MockFoundation_VegetaAttacker_Call{Call: _e.mock.On("VegetaAttacker")}
}

func (_c *MockFoundation_VegetaAttacker_Call) Run(run func()) *MockFoundation_VegetaAttacker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFoundation_VegetaAttacker_Call) Return(_a0 app.VegetaAttacker) *MockFoundation_VegetaAttacker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFoundation_VegetaAttacker_Call) RunAndReturn(run func() app.VegetaAttacker) *MockFoundation_VegetaAttacker_Call {
	_c.Call.Return(run)
	return _c
}

// VegetaMetrics provides a mock function with given fields:
func (_m *MockFoundation) VegetaMetrics() app.VegetaMetrics {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VegetaMetrics")
	}

	var r0 app.VegetaMetrics
	if rf, ok := ret.Get(0).(func() app.VegetaMetrics); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(app.VegetaMetrics)
		}
	}

	return r0
}

// MockFoundation_VegetaMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VegetaMetrics'
type MockFoundation_VegetaMetrics_Call struct {
	*mock.Call
}

// VegetaMetrics is a helper method to define mock.On call
func (_e *MockFoundation_Expecter) VegetaMetrics() *MockFoundation_VegetaMetrics_Call {
	return &MockFoundation_VegetaMetrics_Call{Call: _e.mock.On("VegetaMetrics")}
}

func (_c *MockFoundation_VegetaMetrics_Call) Run(run func()) *MockFoundation_VegetaMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFoundation_VegetaMetrics_Call) Return(_a0 app.VegetaMetrics) *MockFoundation_VegetaMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFoundation_VegetaMetrics_Call) RunAndReturn(run func() app.VegetaMetrics) *MockFoundation_VegetaMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFoundation creates a new instance of MockFoundation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFoundation(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFoundation {
	mock := &MockFoundation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
