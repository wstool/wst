// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package app

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/tsenart/vegeta/v12/lib"
)

// NewMockVegetaMetrics creates a new instance of MockVegetaMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVegetaMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVegetaMetrics {
	mock := &MockVegetaMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVegetaMetrics is an autogenerated mock type for the VegetaMetrics type
type MockVegetaMetrics struct {
	mock.Mock
}

type MockVegetaMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVegetaMetrics) EXPECT() *MockVegetaMetrics_Expecter {
	return &MockVegetaMetrics_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockVegetaMetrics
func (_mock *MockVegetaMetrics) Add(r *vegeta.Result) {
	_mock.Called(r)
	return
}

// MockVegetaMetrics_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockVegetaMetrics_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - r *vegeta.Result
func (_e *MockVegetaMetrics_Expecter) Add(r interface{}) *MockVegetaMetrics_Add_Call {
	return &MockVegetaMetrics_Add_Call{Call: _e.mock.On("Add", r)}
}

func (_c *MockVegetaMetrics_Add_Call) Run(run func(r *vegeta.Result)) *MockVegetaMetrics_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *vegeta.Result
		if args[0] != nil {
			arg0 = args[0].(*vegeta.Result)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVegetaMetrics_Add_Call) Return() *MockVegetaMetrics_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVegetaMetrics_Add_Call) RunAndReturn(run func(r *vegeta.Result)) *MockVegetaMetrics_Add_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function for the type MockVegetaMetrics
func (_mock *MockVegetaMetrics) Close() {
	_mock.Called()
	return
}

// MockVegetaMetrics_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockVegetaMetrics_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockVegetaMetrics_Expecter) Close() *MockVegetaMetrics_Close_Call {
	return &MockVegetaMetrics_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockVegetaMetrics_Close_Call) Run(run func()) *MockVegetaMetrics_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVegetaMetrics_Close_Call) Return() *MockVegetaMetrics_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVegetaMetrics_Close_Call) RunAndReturn(run func()) *MockVegetaMetrics_Close_Call {
	_c.Run(run)
	return _c
}

// Metrics provides a mock function for the type MockVegetaMetrics
func (_mock *MockVegetaMetrics) Metrics() *vegeta.Metrics {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metrics")
	}

	var r0 *vegeta.Metrics
	if returnFunc, ok := ret.Get(0).(func() *vegeta.Metrics); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vegeta.Metrics)
		}
	}
	return r0
}

// MockVegetaMetrics_Metrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metrics'
type MockVegetaMetrics_Metrics_Call struct {
	*mock.Call
}

// Metrics is a helper method to define mock.On call
func (_e *MockVegetaMetrics_Expecter) Metrics() *MockVegetaMetrics_Metrics_Call {
	return &MockVegetaMetrics_Metrics_Call{Call: _e.mock.On("Metrics")}
}

func (_c *MockVegetaMetrics_Metrics_Call) Run(run func()) *MockVegetaMetrics_Metrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVegetaMetrics_Metrics_Call) Return(metrics *vegeta.Metrics) *MockVegetaMetrics_Metrics_Call {
	_c.Call.Return(metrics)
	return _c
}

func (_c *MockVegetaMetrics_Metrics_Call) RunAndReturn(run func() *vegeta.Metrics) *MockVegetaMetrics_Metrics_Call {
	_c.Call.Return(run)
	return _c
}
