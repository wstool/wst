// Code generated by mockery v2.40.1. DO NOT EDIT.

package app

import (
	afero "github.com/spf13/afero"

	fs "io/fs"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockFs is an autogenerated mock type for the Fs type
type MockFs struct {
	mock.Mock
}

type MockFs_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFs) EXPECT() *MockFs_Expecter {
	return &MockFs_Expecter{mock: &_m.Mock}
}

// Chmod provides a mock function with given fields: name, mode
func (_m *MockFs) Chmod(name string, mode fs.FileMode) error {
	ret := _m.Called(name, mode)

	if len(ret) == 0 {
		panic("no return value specified for Chmod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(name, mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_Chmod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chmod'
type MockFs_Chmod_Call struct {
	*mock.Call
}

// Chmod is a helper method to define mock.On call
//   - name string
//   - mode fs.FileMode
func (_e *MockFs_Expecter) Chmod(name interface{}, mode interface{}) *MockFs_Chmod_Call {
	return &MockFs_Chmod_Call{Call: _e.mock.On("Chmod", name, mode)}
}

func (_c *MockFs_Chmod_Call) Run(run func(name string, mode fs.FileMode)) *MockFs_Chmod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.FileMode))
	})
	return _c
}

func (_c *MockFs_Chmod_Call) Return(_a0 error) *MockFs_Chmod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_Chmod_Call) RunAndReturn(run func(string, fs.FileMode) error) *MockFs_Chmod_Call {
	_c.Call.Return(run)
	return _c
}

// Chown provides a mock function with given fields: name, uid, gid
func (_m *MockFs) Chown(name string, uid int, gid int) error {
	ret := _m.Called(name, uid, gid)

	if len(ret) == 0 {
		panic("no return value specified for Chown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, int) error); ok {
		r0 = rf(name, uid, gid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_Chown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chown'
type MockFs_Chown_Call struct {
	*mock.Call
}

// Chown is a helper method to define mock.On call
//   - name string
//   - uid int
//   - gid int
func (_e *MockFs_Expecter) Chown(name interface{}, uid interface{}, gid interface{}) *MockFs_Chown_Call {
	return &MockFs_Chown_Call{Call: _e.mock.On("Chown", name, uid, gid)}
}

func (_c *MockFs_Chown_Call) Run(run func(name string, uid int, gid int)) *MockFs_Chown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockFs_Chown_Call) Return(_a0 error) *MockFs_Chown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_Chown_Call) RunAndReturn(run func(string, int, int) error) *MockFs_Chown_Call {
	_c.Call.Return(run)
	return _c
}

// Chtimes provides a mock function with given fields: name, atime, mtime
func (_m *MockFs) Chtimes(name string, atime time.Time, mtime time.Time) error {
	ret := _m.Called(name, atime, mtime)

	if len(ret) == 0 {
		panic("no return value specified for Chtimes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) error); ok {
		r0 = rf(name, atime, mtime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_Chtimes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chtimes'
type MockFs_Chtimes_Call struct {
	*mock.Call
}

// Chtimes is a helper method to define mock.On call
//   - name string
//   - atime time.Time
//   - mtime time.Time
func (_e *MockFs_Expecter) Chtimes(name interface{}, atime interface{}, mtime interface{}) *MockFs_Chtimes_Call {
	return &MockFs_Chtimes_Call{Call: _e.mock.On("Chtimes", name, atime, mtime)}
}

func (_c *MockFs_Chtimes_Call) Run(run func(name string, atime time.Time, mtime time.Time)) *MockFs_Chtimes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *MockFs_Chtimes_Call) Return(_a0 error) *MockFs_Chtimes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_Chtimes_Call) RunAndReturn(run func(string, time.Time, time.Time) error) *MockFs_Chtimes_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: name
func (_m *MockFs) Create(name string) (afero.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 afero.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (afero.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) afero.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFs_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFs_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
func (_e *MockFs_Expecter) Create(name interface{}) *MockFs_Create_Call {
	return &MockFs_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *MockFs_Create_Call) Run(run func(name string)) *MockFs_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFs_Create_Call) Return(_a0 afero.File, _a1 error) *MockFs_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFs_Create_Call) RunAndReturn(run func(string) (afero.File, error)) *MockFs_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Mkdir provides a mock function with given fields: name, perm
func (_m *MockFs) Mkdir(name string, perm fs.FileMode) error {
	ret := _m.Called(name, perm)

	if len(ret) == 0 {
		panic("no return value specified for Mkdir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(name, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_Mkdir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mkdir'
type MockFs_Mkdir_Call struct {
	*mock.Call
}

// Mkdir is a helper method to define mock.On call
//   - name string
//   - perm fs.FileMode
func (_e *MockFs_Expecter) Mkdir(name interface{}, perm interface{}) *MockFs_Mkdir_Call {
	return &MockFs_Mkdir_Call{Call: _e.mock.On("Mkdir", name, perm)}
}

func (_c *MockFs_Mkdir_Call) Run(run func(name string, perm fs.FileMode)) *MockFs_Mkdir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.FileMode))
	})
	return _c
}

func (_c *MockFs_Mkdir_Call) Return(_a0 error) *MockFs_Mkdir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_Mkdir_Call) RunAndReturn(run func(string, fs.FileMode) error) *MockFs_Mkdir_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirAll provides a mock function with given fields: path, perm
func (_m *MockFs) MkdirAll(path string, perm fs.FileMode) error {
	ret := _m.Called(path, perm)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(path, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type MockFs_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - path string
//   - perm fs.FileMode
func (_e *MockFs_Expecter) MkdirAll(path interface{}, perm interface{}) *MockFs_MkdirAll_Call {
	return &MockFs_MkdirAll_Call{Call: _e.mock.On("MkdirAll", path, perm)}
}

func (_c *MockFs_MkdirAll_Call) Run(run func(path string, perm fs.FileMode)) *MockFs_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.FileMode))
	})
	return _c
}

func (_c *MockFs_MkdirAll_Call) Return(_a0 error) *MockFs_MkdirAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_MkdirAll_Call) RunAndReturn(run func(string, fs.FileMode) error) *MockFs_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockFs) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFs_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockFs_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockFs_Expecter) Name() *MockFs_Name_Call {
	return &MockFs_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockFs_Name_Call) Run(run func()) *MockFs_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFs_Name_Call) Return(_a0 string) *MockFs_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_Name_Call) RunAndReturn(run func() string) *MockFs_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: name
func (_m *MockFs) Open(name string) (afero.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 afero.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (afero.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) afero.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFs_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockFs_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - name string
func (_e *MockFs_Expecter) Open(name interface{}) *MockFs_Open_Call {
	return &MockFs_Open_Call{Call: _e.mock.On("Open", name)}
}

func (_c *MockFs_Open_Call) Run(run func(name string)) *MockFs_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFs_Open_Call) Return(_a0 afero.File, _a1 error) *MockFs_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFs_Open_Call) RunAndReturn(run func(string) (afero.File, error)) *MockFs_Open_Call {
	_c.Call.Return(run)
	return _c
}

// OpenFile provides a mock function with given fields: name, flag, perm
func (_m *MockFs) OpenFile(name string, flag int, perm fs.FileMode) (afero.File, error) {
	ret := _m.Called(name, flag, perm)

	if len(ret) == 0 {
		panic("no return value specified for OpenFile")
	}

	var r0 afero.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, fs.FileMode) (afero.File, error)); ok {
		return rf(name, flag, perm)
	}
	if rf, ok := ret.Get(0).(func(string, int, fs.FileMode) afero.File); ok {
		r0 = rf(name, flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, fs.FileMode) error); ok {
		r1 = rf(name, flag, perm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFs_OpenFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenFile'
type MockFs_OpenFile_Call struct {
	*mock.Call
}

// OpenFile is a helper method to define mock.On call
//   - name string
//   - flag int
//   - perm fs.FileMode
func (_e *MockFs_Expecter) OpenFile(name interface{}, flag interface{}, perm interface{}) *MockFs_OpenFile_Call {
	return &MockFs_OpenFile_Call{Call: _e.mock.On("OpenFile", name, flag, perm)}
}

func (_c *MockFs_OpenFile_Call) Run(run func(name string, flag int, perm fs.FileMode)) *MockFs_OpenFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(fs.FileMode))
	})
	return _c
}

func (_c *MockFs_OpenFile_Call) Return(_a0 afero.File, _a1 error) *MockFs_OpenFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFs_OpenFile_Call) RunAndReturn(run func(string, int, fs.FileMode) (afero.File, error)) *MockFs_OpenFile_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: name
func (_m *MockFs) Remove(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockFs_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - name string
func (_e *MockFs_Expecter) Remove(name interface{}) *MockFs_Remove_Call {
	return &MockFs_Remove_Call{Call: _e.mock.On("Remove", name)}
}

func (_c *MockFs_Remove_Call) Run(run func(name string)) *MockFs_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFs_Remove_Call) Return(_a0 error) *MockFs_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_Remove_Call) RunAndReturn(run func(string) error) *MockFs_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAll provides a mock function with given fields: path
func (_m *MockFs) RemoveAll(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_RemoveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAll'
type MockFs_RemoveAll_Call struct {
	*mock.Call
}

// RemoveAll is a helper method to define mock.On call
//   - path string
func (_e *MockFs_Expecter) RemoveAll(path interface{}) *MockFs_RemoveAll_Call {
	return &MockFs_RemoveAll_Call{Call: _e.mock.On("RemoveAll", path)}
}

func (_c *MockFs_RemoveAll_Call) Run(run func(path string)) *MockFs_RemoveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFs_RemoveAll_Call) Return(_a0 error) *MockFs_RemoveAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_RemoveAll_Call) RunAndReturn(run func(string) error) *MockFs_RemoveAll_Call {
	_c.Call.Return(run)
	return _c
}

// Rename provides a mock function with given fields: oldname, newname
func (_m *MockFs) Rename(oldname string, newname string) error {
	ret := _m.Called(oldname, newname)

	if len(ret) == 0 {
		panic("no return value specified for Rename")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oldname, newname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFs_Rename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rename'
type MockFs_Rename_Call struct {
	*mock.Call
}

// Rename is a helper method to define mock.On call
//   - oldname string
//   - newname string
func (_e *MockFs_Expecter) Rename(oldname interface{}, newname interface{}) *MockFs_Rename_Call {
	return &MockFs_Rename_Call{Call: _e.mock.On("Rename", oldname, newname)}
}

func (_c *MockFs_Rename_Call) Run(run func(oldname string, newname string)) *MockFs_Rename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockFs_Rename_Call) Return(_a0 error) *MockFs_Rename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFs_Rename_Call) RunAndReturn(run func(string, string) error) *MockFs_Rename_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields: name
func (_m *MockFs) Stat(name string) (fs.FileInfo, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFs_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type MockFs_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - name string
func (_e *MockFs_Expecter) Stat(name interface{}) *MockFs_Stat_Call {
	return &MockFs_Stat_Call{Call: _e.mock.On("Stat", name)}
}

func (_c *MockFs_Stat_Call) Run(run func(name string)) *MockFs_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFs_Stat_Call) Return(_a0 fs.FileInfo, _a1 error) *MockFs_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFs_Stat_Call) RunAndReturn(run func(string) (fs.FileInfo, error)) *MockFs_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFs creates a new instance of MockFs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFs(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFs {
	mock := &MockFs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
